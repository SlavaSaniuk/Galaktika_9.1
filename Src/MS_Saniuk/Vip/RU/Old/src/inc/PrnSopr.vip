!╔═══════════════════════════════════════════════════════════════════════════╗
!║ Назначение    : печать документа на базе прототипа TOVN                   ║
!║ Параметры     : 1-й  pNrec     - KatSopr.NRec,                            ║
!║                 2-й  MarkerNZ  - маркер для групповой печати документов   ║
!║                 3-й  wParam    - параметр для доп.возможностей печати     ║
!╚═══════════════════════════════════════════════════════════════════════════╝

! описание wParam
! - для KatSopr.VidSopr=201:
!    1-й бит - Печать накладных с группировкой спецификации МЦ
!    2-й бит - Накладная на реализацию из РОЗНИЧНОЙ ТОРГОВЛИ
!    3-й бит - Накладная из ОС
! - для KatSopr.VidSopr=110:
!    1-й бит - Печать М-15 для акта выполненных работ
!

#include ExtAttr.vih
#include ExtClass.vih
#include ExtAttrClass.vih
#include oEdIzm.vih
#include UKSfuns.vih
#include FactoryPrice.vih
#include ArtDiz.vih    // группа отчетов для Арт-Дизайна
#include TxoBind.vih   // Сложная привязка ТХО, и запуск сложной разноски
#include MTRFuncs.vih  // функции целевого учета
#include KatOrg.Vih
#include KatOrgAttr.vih

#doc
Назначение:
  Интерфейс печати документа на базе прототипа TOVN

Параметры:
   pNrec     - KatSopr.NRec,
   MarkerNZ  - маркер для групповой печати документов
   wParam    - параметр для доп.возможностей печати
           - для KatSopr.VidSopr=201:
             1-й бит - Печать накладных с группировкой спецификации МЦ
             2-й бит - Накладная на реализацию из РОЗНИЧНОЙ ТОРГОВЛИ
             3-й бит - Отчеты в FastReport
           - для KatSopr.VidSopr=110:
             1-й бит - Печать М-15 для акта выполненных работ 
#end
Interface PrintSopr;
!Таблица с налогами для второго цикла спецификации
table struct Nalogi
(
  cSpSopr  : Comp,
  sNDS     : Double,
  sNDSv    : Double,
  PrNDS    : Double,
  sSpN     : Double,
  sSpNv    : Double,
  PrSpN    : Double,
  sNSel    : Double,
  sNSelv   : Double,
  PrNSel   : Double
)
with index
(
  tmpNal01 = cSpSopr
);

#include oEdIzm.var
#include UKSfuns.var
#include MTRFuncs.var
#include FactoryPrice.var
#include ExtAttr.var
#include ExtClass.var
#include KatOrgAttr.var

type
TDefineInDoc = record
  doc201byte1, //группа отчетов для Арт-Дизайна
  RzNakl,      //накладная из розницы
  _RETTARA_ : boolean;
end;

var pKatorg: KatOrg;
var sAllDocs, sCerts: array [1..5] of string;  // Полный список документов, следуемых с грузом
var sPrice : string;
var MyDef  : TDefineInDoc;//дефайны

function fnSoprProcNac (wProc: word) : string; forward;

create view
var
  pNrec    : comp;    //параметр 1
  MarkerNZ : longint; //параметр 2
  wParam   : word;    //параметр 3

  frmHandle: longint;
  IndexNZ  : longint;
! ------переменные из soprvar.vpp
  TypeSopr: word;       // Тип сопроводительного документа
  SkPr: word;           // Склад/Производство
  Cena_Pr, Cena_PrR, Cena_PrV, Cena_PrTTN, Cena_PrRTTN, Cena_PrVTTN : integer; // для печати кол-во после запятой в ценах
  wNDS_St : byte;
  NDS_St : string;
  Kol_Pr : word; // для печати ко-во после запятой в количестве

  KolZnCena, KolZnCenaV, wSkidkaDO  : word;
  sNameFPrice, sNameProcSN, sNameNP, SCena_Pr , SCena_PrR,
  SCena_PrV,SCena_PrTTN , SCena_PrRTTN,
  SCena_PrVTTN, sNameNPStavka, sNamePriceDO, sNameProcDO, sNamePriceList,
  sNameNPStZero, SKol_Pr: string;
  bDocEveryStr : boolean;

!-------итоговые переменные------------------------------

  AKolF, AKolU, AKolM, AKolV, KoefP, // Суммарное количество
  AStNak, AStNac, AStVal,            // Суммарные стоимости
  AStNakBN, AStNacBN, AStValBN,      // Суммарные стоимости без налогов
  AStNakSN, AStNacSN, AStValSN,      // Суммарные стоимости с налогами
  sNDS, sSpN, sNDSv,
  sSpNv, aNds,aNDSv,
  aSpN, aSpNv,
  sNSel,sNSelv,aNSel, aNSelv,        // Суммы налогов
  ASumOpl: double;                   // Суммы оплаты с налогами и без налогов
  ANam: integer;                     // Количество наименований
!--------------------------------------------------------
//для "Печать накладных с группировкой спецификации МЦ"
//работает только при "включенном" параметре TDefineInDoc.doc201byte1
  n1, n2 : string;
  ___kol, ___Summa, ___NDS, ___AllSumma: double;
  bPrint: objArtDiz1;
//-------------------
  isNalogs      // Флаг необходимости учета налогов
, ResOrder      // Признак сформированности складск ордеров
, NdsInPrice    // Входимость НДС в цену (для накладных без налогов)
, isFastReport  // печать отчетов с внешним расчетом полей
, isSklDoc      // документы складского учета (без контрагента)
, NdsInSklTTN   // рассчет НДС непосредственно при печати
, isPrihNakl    // приходные накладные
, isAktRec      // рекламационные акты
, isAlc         // печать алкогольных накладных
, isWorkFactoryPrice // заводская цена в документах
, isPrnVariantMcUsl  // печать вариантов наименования МЦ/Услуг
, isDEI
, isUsl         // печать услуг
, isPriceList   // печать прайс-листа
, bIsOnePatry
, bFixGrMC
, bNalProd
, bAutoGrM
, isRozn911
                : boolean;

  sGroupName    // наименование группы отчетов
, ProcNac_Pr    // число знаков в дробной части при отображении процента оптовой скидки/надбавки
, sBuhName      // Главный (старший) бухгалтер
                : string;

//с грузом следуют документы - ссылка на классификатор + код таблицы
  pClassDocOfGoods    : comp;
  wClassCodeDocOfGoods: word;

//настройки
  cMyOrg      // собственная организация
, cNalogNDS   // НДС
, cNalogAkcis // акциз
, cNalogProd  // налог с продаж
             : comp;

  wProcNacFormat  : word;    // формат вывода процента оптовой надбавки
  CursV           : double;
  SHT_CE_vid      : word;    // Штерн Цемент
  iAllDocs, iCerts: word;    // Счетчик документов, следуемых с грузом
  sGroupNal       : string;  // Код группы МЦ для алгоритма с разницей отпускной и учетной цен

(
  Valut    //символ валюты
, ValutAvt  //-- валюта ж\д тарифа
, SpSoprProcNac  //процент наценки
)
as select
//Valut
  oValFunc.GetValSymbol(KatSopr.cVal),
//ValutAvt
  oValFunc.GetValSymbol(SpSopr.cValAvt),
//SpSoprProcNac
  fnSoprProcNac (wProcNacFormat),

  KatSopr.*, SpSopr.*, KatPodr.Name, KatPodrTo.Name, KatMol.Name,
  KatOrg.Name,KatNazna.Name,NZakaz.NoDoc,NZakaz.DDoc, KatState.Name, KatState.isNal,
  SchFact.NRec,SchFact.Num, KatPayMent.Name,
  KlVal.SimvolV,DovFIO.*,
  KatMC.*,
  TTNMoveCell.Name
, KatStroy.Name, AddSumTune.Name, SpecZatr.cUks

From
  KatSopr, SpSopr, SpDocNal, TTNDoc
, KatOrg
, KatOrg KatOrgF
, KatOrg MyKatOrg
, KatOrg KatOrgTo
, KatState, KatNazna, KatPayMent
, Dogovor, BaseDoc, StepDoc, SpStep, NZakaz
, KatMc, KatUsl, KatParty
, GroupMC, GroupUsl, GroupParty
, KatOtpEd, KatEd, SpOtpEd
, KatOtpEd KatOtpEdGrM
, KatDopEd, SpDopEd
, SchFact
, SklOrder, SpOrder
, KatPodr, KatMOL
, Nalogi
, KatPodr KatPodrTo
, KatMOL KatMOLTo
, KatOrg OrgDovPost
, KatOrg OrgDovPay
, KatOrg OrgKutPrih
, KatState KatStateF
, KatSopr KatSoprKutPrih
, Dover, DovFIO
, KlVal
, SoprHoz
, KatStroy, AddSumTune, SpecZatr
, MoveCell TTNMoveCell
, KlVal    TTNKlVal
, KatED    TTNKatED
, ResOtgr  TTNResOtgr
, MetMassa TTNMetMassa
, KatSopr    RKatSopr
, SpSopr     RSpSopr
, SpSopr     SpSoprF
, ExClassSeg ExClassSeg2
, Appointments, Persons
, KnDriver, Marka, MetLoad, Transp
, AttrNam, AttrVal
, ExClassName, ExClassSeg, ExClassVal
, Catalogs
, klResHr
, TuneDef
, RzSpDoc, RzKutPrih, RzDoc
, AllMemo
, SpDocNal SpDocNalF
, KlPrice
, KatDoc

Where
((
   KatSopr.NRec           ==  SpSopr.cSopr      and
   coKatSopr              ==  TTNDoc.wTable     and
   KatSopr.NRec           ==  TTNDoc.cDoc       and

   KatSopr.cNazna         ==  KatNazna.Nrec     and
   KatSopr.cPayment       ==  KatPayment.NRec   and
   KatSopr.VidSopr        ==  KatDoc.TiDkGal    and

   KatSopr.cOrgBase       ==  KatOrg.NRec       and
   KatOrg.cState          ==  KatState.NRec     and
   KatOrgF.cState         ==  KatStateF.NRec    and
   cMyOrg                 ==  MyKatOrg.NRec     and
   KatSopr.cGruzTo        ==  KatOrgTo.NRec     and

   KatSopr.cStepDoc       ==  StepDoc.NRec      and
   StepDoc.cBaseDoc       ==  BaseDoc.NRec      and
   KatSopr.cSchFact       ==  SchFact.NRec      and
   KatSopr.cNZakaz        ==  NZakaz.NRec       and
   SpSopr.cSpStep         ==  SpStep.NRec       and

   KatSopr.NRec           ==  SklOrder.cSopr    and
   KatSopr.cPodrFrom      ==  KatPodr.NRec      and
   KatSopr.cPodrTo        ==  KatPodrTo.NRec    and
   KatSopr.cMolFrom       ==  KatMOL.NRec       and
   KatSopr.cMolTo         ==  KatMOLTo.NRec     and
   KatSopr.cValut         ==  KlVal.NRec        and
   KatSopr.cDovFIO        ==  DovFIO.NRec       and

   KatSopr.cDover         ==  Dover.NRec        and
   Dover.cPay             ==  OrgDovPay.NRec    and
   Dover.cPost            ==  OrgDovPost.NRec   and

   SpSopr.cOtpEd          ==  KatOtpEd.NRec     and
   SpSopr.cMCUSL          ==  KatMC.NRec        and
   SpSopr.cMCUsl          ==  KatUsl.NRec       and
   SpSopr.cParty          ==  KatParty.NRec     and
   SpSopr.cPriceList      ==  KlPrice.NRec      and
   if (SpSopr.PrMc = 1,
   KatMc.cEd,
   KatUsl.cEd)            ==  KatEd.NRec        and
   SpSopr.cOtpEdGRM       ==  KatOtpEdGrM.NRec  and
   KatMC.cGroupMC         ==  GroupMC.NRec      and
   KatUsl.cGroupUsl       ==  GroupUsl.NRec     and

   SpSopr.cUKS            ==  KatStroy.Nrec     and
   SpSopr.nRec            ==  SpecZatr.cSpec    and
   coSpSopr               ==  SpecZatr.coTable  and
   SpecZatr.cAddSumTune   ==  AddSumTune.nRec   and

   SpSopr.NRec            ==  SpDocNal.cSpDoc   and
   KatSopr.VidSopr        ==  SpDocNal.TipDoc   and

   SpSopr.cCellVal        ==  TTNMoveCell.NRec  and
   SpSopr.cValAvt         ==  TTNKlVal.NRec     and
   SpSopr.cMasEd          ==  TTNKatED.NRec     and
   SpSopr.cResOtgr        ==  TTNResOtgr.NRec   and
   SpSopr.cMasVid         ==  TTNMetMassa.NRec  and

   coSpSopr               ==  SpDopEd.wTable    and
   SpSopr.NRec            ==  SpDopEd.cRec      and
   word(1)                ==  SpDopEd.wTipKol   and
   SpDopEd.cDopEd         ==  KatDopEd.nRec     and

   word(coKatMC)          == AllMemo.wTable     and
   KatMC.NRec             == AllMemo.cRec
))

Bounds SpSoprMcOnly  =   KatSopr.Nrec == SpSopr.cSopr AND
                         word(1)      == SpSopr.PrMC
                         ordered by SpSopr.Npp

Bounds SpSopr632Only =   KatSopr.Nrec == SpSopr.cSopr AND
                         word(0)      == SpSopr.PrMC
                         ordered by SpSopr.Npp

Bounds SpSoprAll     =   KatSopr.Nrec == SpSopr.cSopr
                         ordered by SpSopr.PrMc, SpSopr.Npp
;


create view FixGroupMC
var
  AllowedDepGroupList: longint;

from
  KatLink
, X$USERS

where
((
  coGroupMC            == KatLink.CodeTable and
  X$USERS.XU$LOGINNAME == KatLink.OwnName
))
;

Parameters
  pNRec,
  MarkerNZ,
  wParam
;

Form FPrRashNak('tovn.out','tovn') with novisual;
Form FPrRashNakDEI('tovn_dei.out','tovn_dei') with novisual;
Form frm1wed('err2wed.OUT','ERRR') with novisual;

#INCLUDE Sopconst.inc // Константы для сопроводительных документов
#include Soprc16.vpp //там writeAttr
#include SoprGen2.vpp
#include fsround.vpp
#include SoprVal.vpp //Модуль работы с валютой в накладной


// процент наценки; wProc - 0 - входящий/исходящий, 1 - исходящий
function fnSoprProcNac(wProc: word): string;
var
  s: string;
{
  fnSoprProcNac := '-';

  // для розницы
  if (MyDef.RzNakl)
  {
    fnSoprProcNac := DoubleToStr(SpSopr.ProcNac, ProcNac_Pr);
    Exit;
  }
  // нет работы с заводской ценой
  if (not isWorkFactoryPrice)
    Exit;

  // только для МЦ
  if (SpSopr.PrMc > 1)
    Exit;

  // не выводить
  if (wProc = 2)
    Exit;

  // только исходящий
  if (wProc = 1)
  {
    if (Round(SpSopr.ProcNac, 2) <> double(0))
      fnSoprProcNac := DoubleToStr(SpSopr.ProcNac, ProcNac_Pr);
    Exit;
  }

  s := DoubleToStr(SpSopr.ProcNac, ProcNac_Pr);

  if (SpSopr.PrMC = 1)
  {
    if SpSopr.cParty <> 0
      fnSoprProcNac := DoubleToStr(KatParty.VHODON, ProcNac_Pr) + '/ ' + s;
    else
      fnSoprProcNac := DoubleToStr(KatMC.VHODON, ProcNac_Pr) + '/ ' + s;
  }
}

// Число знаков в дробной части при отображении процента оптовой скидки/надбавки
Function GetProcNac_Pr: string;
var
  wKolZn, i: word;
  Res: string;
{
  wKolZn := wGetTune('Doc.SD.PrnNakl.KolSignProcNac');
  Res    := '\' + string(wKolZn) + 'p[|-]3666';

  for (i := 1; i <= wKolZn; inc(i))
    Res := Res + if (i = 1, '.8', '8');

  GetProcNac_Pr := Res;
}

//установка дефайнов
Procedure SetMyDefs;
{
  MyDef.doc201byte1 := false;
  case TypeSopr of
   201..203: MyDef.doc201byte1 := (wParam and 1) = 1;
  end;
  MyDef.RzNakl      := (wParam and 2) = 2;
  MyDef._RETTARA_   := (TypeSopr = 101) or (TypeSopr = 108) or (TypeSopr = 201) or
                       (TypeSopr = 106) or (TypeSopr = 206);
}

//процедура печати накладной
#include PrnSopr.vpp

Handleevent
 cmInit:
 {
   abort;
   if GetFirst KatSopr where (( pNRec == KatSopr.NRec )) <> tsOk
   {
     message('Не найден документ!'#10#13+
             'Печать отменена.');
     EXIT;
   }

   frmHandle   := FPrRashNak.Handle;
   TypeSopr    := KatSopr.VidSopr;
   isSklDoc    := false;
   isPrihNakl  := false;
   isAktRec    := false;
   NdsInSklTTN := false;
   SetMyDefs;
   isWorkFactoryPrice := boGetTune('Doc.FactoryPrice');

   if wGetTune('Country') <> ccRus
     isFastReport := FALSE;
   else
   isFastReport       := boGetTune('Doc.FastReport');

   isPrnVariantMcUsl  := (wGetTune ('Doc.SD.PrnNakl.PrnVariant') = 1) AND (NOT MyDef.doc201byte1);
   cMyOrg             := coGetTune('MyOrg');
   cNalogNDS          := coGetTune('Nalog.cNalogNDS');
   cNalogAkcis        := coGetTune('Nalog.cNalogAkcis');
   cNalogProd         := coGetTune('Nalog.cNalogProd');
   wProcNacFormat     := wGetTune ('Doc.SD.PrnNakl.ProcNac');

   sBuhName           := Trim(sGetTune('Doc.SD.PrnNakl.StBuh'));
   sBuhName           := if (sBuhName = '', sGetTune('MainBuh'), sBuhName);
   isDEI              := false;
   isUsl              := wGetTune('Doc.SD.PrnNakl.PrnUsl') = 1;
   isPriceList        := wGetTune('Doc.SD.PrnNakl.PrnPrice') = 1;

   //определение вида сопроводительного документа
   case TypeSopr of
     101..103, 522..523:
     {
       isPrihNakl   := true;
       sGroupName   := if (isFastReport, 'Приходные накладные (fast)', 'Приходные накладные');

       if (MyDef.RzNakl)
       {
         isPrihNakl := false;
         sGroupName := if (isFastReport, 'Розничные накладные (fast)', 'Розничные накладные')
       }
     }

     108:
     {
       isPrihNakl   := true;
       sGroupName   := if (isFastReport, 'Прием молочной продукции (fast)', 'Прием молочной продукции');
     }
     111:
     {
       sGroupName   :=  'Акты на услуги (снабжение)';
       isUsl := True;
     }

     110:
     {
       if ((wParam and 1) = 1)
       {
         // печать М-15 для акта выполненных работ
         sGroupName := 'Акты выполненных работ (собственные)';
         isUsl := false;
       }
       else
       {
         sGroupName   := 'Акты выполненных работ';
         isUsl := true;
       }

       isFastReport := false;
     }

     115:
     {
       isPrihNakl   := true;
       sGroupName   := 'Акт реализации материалов';
       isFastReport := false;
       isDEI        := true;
       frmHandle    := FPrRashNakDEI.Handle;
     }
     106, 206:
     {
       isAktRec     := true;
       sGroupName   := if (isFastReport, 'Рекламационные накладные (fast)', 'Рекламационные накладные');
     }
     201:
     {
       if (MyDef.RzNakl)
         sGroupName := if (isFastReport, 'Розничные накладные (fast)', 'Розничные накладные')
       else
         if (boGetTune('Ves.Use'))//стандартное рабочее место весовщика
           sGroupName := if (SHT_CE_vid = 1,'ТТН тара','ТТН навал');
         else
           sGroupName := if (isFastReport, 'Накладные на продажу (fast)', 'Накладные на продажу');
     }
     205:
     {
       sGroupName   := 'ТТН';
     }
     210,229:
     {
       sGroupName   :=  'Акты на строительство';
       //пока без поддержки быстрых отчетов, т.к. в группе нет таковых форм
       isFastReport := false;
     }
     211:
     {
       sGroupName   :=  'Акты на услуги';
       //пока без поддержки быстрых отчетов, т.к. в группе нет таковых форм
       isFastReport := false;
       isUsl := True;
     }
     501..506:
     {
       isSklDoc     := TRUE;
       sGroupName   := If (isFastReport,'ТТН_600 (fast)','ТТН_600');
       isFastReport := FALSE;
       NdsInSklTTN  := boGetTune('Oper.NDSInSklTTN');
     }
     600..607:
     {
       if (MyDef.RzNakl)
       {
         sGroupName   := 'Розничные накладные_600';
         isSklDoc     := true;
         isFastReport := false;
         NdsInSklTTN  := false;
       }
       else
       {
         isSklDoc     := true;
         sGroupName   := if (isFastReport,'ТТН_600 (fast)','ТТН_600');
         isFastReport := false;
         NdsInSklTTN  := boGetTune('Oper.NDSInSklTTN');
       }
     }
     551, 552:
     {
       // для ремонтных накладны необязательно заполнение подрядчика
       isSklDoc := TRUE;

       if TypeSopr = 551
       {
         sGroupName := 'Накладные на отпуск(ТОРО)';
       }
       else
       {
         sGroupName := 'Накладные на возврат(ТОРО)';
       }
     }
     632:
     {
       // для ремонтных накладны необязательно заполнение подрядчика
       isSklDoc := TRUE;
       sGroupName := 'Акт на перемещение между объектами';
     }
     else
       sGroupName   := if (isFastReport,'Накладные на продажу (fast)', 'Накладные на продажу');
   end;

   if ((wParam AND 4) = 4)
     sGroupName := 'FastReport';

   if (isAktRec or isPrihNakl)
     isAlc := false;
   else
     isAlc := wGetTune('Doc.Sell.PrintAlc') = word(1);

   ReadMyDsk(SHT_CE_vid,'for_prnsopr_SHT_CE_vid',false);

   // Форамат отображения
   SetRoundFormat(TypeSopr);//-- классы точности
   Cena_Pr    := GetPrecisionGroup('brForSopr_RVPrice');
   Cena_PrR   := GetPrecisionGroup('brForSopr_Price');
   Cena_PrV   := GetPrecisionGroup('brForSopr_VPrice');
   Kol_Pr     := GetDlinaDrob_forKol;
   ProcNac_Pr := GetProcNac_Pr;

//------------------------------------------------------------------------------
  var sSymb  : string;
  var ii, nn : word;

  sSymb    := sGetTune('Doc.SD.PrnNakl.SepSymbol');

#ifdef USE_SEP_SYMBOL
  SCena_Pr  := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
  SCena_PrR := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
  SCena_PrV := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
  SCena_PrTTN  := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
  SCena_PrRTTN := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
  SCena_PrVTTN := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
  SKol_Pr   := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
#else
  SCena_Pr  := '[|-]3666666666666666';
  SCena_PrR := '[|-]3666666666666666';
  SCena_PrV := '[|-]3666666666666666';
  SCena_PrTTN  := '[|-]3666666666666666';
  SCena_PrRTTN := '[|-]3666666666666666';
  SCena_PrVTTN := '[|-]3666666666666666';
  SKol_Pr   := '[|-]3666666666666666';
#end

  nn := Cena_Pr;

  for (ii:=1; ii<=nn; ii:=ii+1)
    SCena_Pr := SCena_Pr + if (ii = 1, '.8', '8');

  SCena_Pr  := '\'+string(nn)+'p' + SCena_Pr;
//------------------------------------------------------------------------------
  nn := Cena_PrR;

  for (ii:=1; ii<=nn; ii:=ii+1)
    SCena_PrR := SCena_PrR + if (ii = 1, '.8', '8');

  SCena_PrR := '\'+string(nn)+'p' + SCena_PrR;
//------------------------------------------------------------------------------
  nn := Cena_PrV;

  for (ii:=1; ii<=nn; ii:=ii+1)
    SCena_PrV := SCena_PrV + if (ii = 1, '.8', '8');

  SCena_PrV := '\'+string(nn)+'p' + SCena_PrV;
//------------------------------------------------------------------------------
  nn := Cena_PrTTN;

  for (ii:=1; ii<=nn; ii++)
    SCena_PrTTN := SCena_PrTTN + if (ii = 1, '.8', '8');

  SCena_PrTTN := '\'+string(nn)+'p' + SCena_PrTTN;
//------------------------------------------------------------------------------
  nn := Cena_PrRTTN;

  for (ii:=1; ii<=nn; ii++)
    SCena_PrRTTN := SCena_PrRTTN + if (ii = 1, '.8', '8');

  SCena_PrRTTN := '\'+string(nn)+'p' + SCena_PrRTTN;
//------------------------------------------------------------------------------
  nn := Cena_PrVTTN;

  for (ii:=1; ii<=nn; ii++)
    SCena_PrVTTN := SCena_PrVTTN + if (ii = 1, '.8', '8');

  SCena_PrVTTN := '\'+string(nn)+'p' + SCena_PrVTTN;
//------------------------------------------------------------------------------
  nn := GetDlinaDrob_forKol;

  for (ii:=1; ii<=nn; ii:=ii+1)
    SKol_Pr := SKol_Pr + if (ii = 1, '.8', '8');

  SKol_Pr := '\'+string(nn)+'p' + SKol_Pr;
//------------------------------------------------------------------------------
   NDS_St  := '\0p[|-]3666';
   wNDS_St := wGetTune('Doc.SD.PrnNakl.KolSignNDS');

   if (wNDS_St > 0)
     NDS_St := PadCh('\'+string(wNDS_St) + 'p[|-]3666.', '8', 12 + wNDS_St);

   KolZnCenaV    := GetPrecisionGroup('brForSopr_RVPrice');
   KolZnCena     := GetPrecisionGroup('brForSopr_Price');
   wSkidkaDO     := wGetTune('Doc.SD.PrnNakl.PrnSkidkaDO');
   sNameFPrice   := sGetTune('Doc.SD.AbbrField.FPrice');
   sNameProcSN   := sGetTune('Doc.SD.AbbrField.ProcSN');
   sNameNP       := sGetTune('Doc.SD.AbbrField.NP');
   sNameNPStavka := sGetTune('Doc.SD.AbbrField.NPStavka');
   sNameNPStZero := sGetTune('Doc.SD.AbbrField.NPStZero');
   sNamePriceDO  := sGetTune('Doc.SD.AbbrField.PriceDO');
   sNameProcDO   := sGetTune('Doc.SD.AbbrField.ProcDO');
   sNamePriceList:= sGetTune('Doc.SD.AbbrField.PriceList');
   bDocEveryStr  := boGetTune('Doc.SD.PrnNakl.DocOfGood');

   //с грузом следуют документы
   pClassDocOfGoods := 0;
   if GetFirst TuneDef where ((trim(Upcase('Doc.FastReport')) == TuneDef.code)) = tsOk
     if GetFirst ExClassName where((coTuneDef                     ==  ExClassName.wTable   and
                                    'С ГРУЗОМ СЛЕДУЮТ ДОКУМЕНТЫ'  ==  ExClassName.Name )) = tsOk
   {
      pClassDocOfGoods     := TuneDef.NRec;
      wClassCodeDocOfGoods := ExClassName.ClassCode;
   }

   // Код группы МЦ для алгоритма с разницей отпускной и учетной цен
   sGroupNal := '';

   if (wGetTune('Oper.Sell.Nakl.IsNalBase') = 1)
     sGroupNal := sGetTune('Oper.Sell.Nakl.KodGrMcNal');

   //печать накладной
   PrintDocument;
 }

end;
End.
