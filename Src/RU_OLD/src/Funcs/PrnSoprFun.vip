//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 8.10 - Логистика
//
//******************************************************************************

#include PrnSoprFun.vih
#include MTRFuncs.vih
#include ObjRemFunc.vih
#include ExtAttrClass.vih
#include CorrDocFun.vih
#include KatOrgAttr.vih

Interface iPrnSoprFun;

#include MTRFuncs.var
#include ObjRemFunc.var
#include CorrDocFun.var
#include KatOrgAttr.var

var
  wShortAutoTR    : word;

  wRoundMass2     : byte;

  bAutoGrM
, bBarKodMC
, bNalProd
, bFixGrMC
, isRozn911       : boolean;

  Massa_Tn      // масса в тоннах
, Massa_Kg      // масса в килограммах
, Massa_Gr      // масса в граммах
, Cena_Pr
, Cena_PrR
, Cena_PrTTN
, Cena_PrRTTN
, NDS_St
, RoundGrm
, Kol_Pr
, sNameFPrice
, sNameProcSN
, sNameNP
, sNameNPStavka
, sNameNPStZero
, sNamePriceDO
, sNameProcDO
, sNamePriceList
, sNameNDSStZero
, sNameNDSSummZero
                  : string;

  c_IN_VAL_DOC_
, c_TTN_ALC_
, c_PROCNAC_
, c_TTN_DOC_ROZN_
, c_TTN_2009R_
, c_TTN_SKL_ORG_
, c_USE_SEP_SYMBOL
                  : boolean;

  cSpSopr         : comp;

  ExAttr          : iExtAttr;

Create View
From
  KatSopr
, SpSopr
, SpDocNal
, Persons
, Appointments
, Catalogs
, KlVal
, KatDopEd
, SpDopEd
, SpecMTR
, SaldTune
, AllMemo
, MOVECELL
, SPKAU
, DOGOVOR
, CardSN
, SpCardSN
, TTNDoc
, KatOrg
, SchFact
, KatMC
, KatEd
, KatOtpEd
, AttrNam
, AttrVal

Where
((
  coSpSopr          == SpDopEd.wTable   and
  cSpSopr           == SpDopEd.cRec     and
  word(1)           == SpDopEd.wTipKol  and
  SpDopEd.cDopEd    == KatDopEd.nRec    and

  coSpSopr          == SpecMTR.coTable  and
  cSpSopr           == SpecMTR.cSpec    and
  SpecMTR.cSaldTune == SaldTune.nRec    and

  cSpSopr           == SpCardSN.cSpSopr and
  SpCardSN.cCardSN  == CardSN.nRec
))
;

File fMemo;

Procedure Set_Format;
var
  nn, ii : word;
  sSymb  : string;
{
  sSymb := sGetTune('Doc.SD.PrnNakl.SepSymbol');

  if c_USE_SEP_SYMBOL
    Cena_Pr := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666'
  else
    Cena_Pr := '[|-]3666666666666666';

  nn := GetPrecisionGroup('brForSopr_RVPrice');

  for (ii:=1; ii<=nn; ii++)
    Cena_Pr += if (ii = 1, '.8', '8');

  Cena_Pr := '\' + string(nn) + 'p' + Cena_Pr;

//------------------------------------------------------------------------------
  if c_USE_SEP_SYMBOL
    Cena_PrR := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666'
  else
    Cena_PrR := '[|-]3666666666666666';

  nn := GetPrecisionGroup('brForSopr_Price');

  for (ii:=1; ii<=nn; ii++)
    Cena_PrR += if (ii = 1, '.8', '8');

  Cena_PrR := '\' + string(nn) + 'p' + Cena_PrR;

//------------------------------------------------------------------------------
  if c_USE_SEP_SYMBOL
  {
    Cena_PrTTN  := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
  }
  else
  {
    Cena_PrTTN  := '[|-]3666666666666666';
  }

  nn := if(GetPrecisionGroup('brForSoprTTN_RVPrice')<> 5, GetPrecisionGroup('brForSoprTTN_RVPrice'), GetPrecisionGroup('brForSopr_RVPrice'));
  for (ii:=1; ii<=nn; ii:=ii+1)
  {
    Cena_PrTTN := Cena_PrTTN + if (ii = 1, '.8', '8');
  }

  Cena_PrTTN  := '\'+string(nn)+'p' + Cena_PrTTN;

//------------------------------------------------------------------------------
  if c_USE_SEP_SYMBOL
  {
    Cena_PrRTTN := '[|-]3666' + sSymb + '666' + sSymb + '666' + sSymb + '666' + sSymb + '666';
  }
  else
  {
    Cena_PrRTTN := '[|-]3666666666666666';
  }

  nn := if(GetPrecisionGroup('brForSoprTTN_Price')<> 5, GetPrecisionGroup('brForSoprTTN_Price'), GetPrecisionGroup('brForSopr_Price'));
  for (ii:=1; ii<=nn; ii:=ii+1)
  {
    Cena_PrRTTN := Cena_PrRTTN + if (ii = 1, '.8', '8');
  }

  Cena_PrRTTN := '\'+string(nn)+'p' + Cena_PrRTTN;
}

//******************************************************************************
// ТТН-1, ТН-2. Инициализация глобальных переменных
Procedure Init(wParam, iwShortAutoTR : word;
               iwRoundMass2 : word;
               ibAutoGrM, ibBarKodMC, iisRozn911 : boolean;
               iMassa_Tn, iMassa_Kg, iMassa_Gr, iCena_Pr, iCena_PrR, iNDS_St, iRoundGrm : string);
{
  wShortAutoTR  := iwShortAutoTR;
  wRoundMass2   := iwRoundMass2;
  bAutoGrM      := ibAutoGrM;
  bBarKodMC     := ibBarKodMC;
  isRozn911     := iisRozn911;
  Massa_Tn      := iMassa_Tn;
  Massa_Kg      := iMassa_Kg;
  Massa_Gr      := iMassa_Gr;

  #__UnUsed__(Cena_Pr,Cena_PrR)
  //Cena_Pr       := iCena_Pr;
  //Cena_PrR      := iCena_PrR;

  NDS_St        := iNDS_St;
  RoundGrm      := iRoundGrm;

  c_IN_VAL_DOC_     := (wParam and  1) =  1;
  c_TTN_ALC_        := (wParam and  2) =  2;
  c_PROCNAC_        := (wParam and  4) =  4;
  c_TTN_DOC_ROZN_   := (wParam and  8) =  8;
  c_TTN_2009R_      := (wParam and 16) = 16;
  c_TTN_SKL_ORG_    := (wParam and 32) = 32;
  c_USE_SEP_SYMBOL  := (wParam and 64) = 64;

  Set_Format;
}

//******************************************************************************
// ТТН-1, ТН-2. Инициализация переменных уровня одного экземпляра накладной
Procedure InitForNakl(ibNalProd, ibFixGrMC : boolean);
{
  bNalProd := ibNalProd;
  bFixGrMC := ibFixGrMC;
}

Function DelDblStr(Str, dblStr: string; isDel: boolean): string;
var
  iPos,iLine: byte;
{
  iLine := length(dblStr);
  iPos  := InStr(dblStr+dblStr, Str);

  while (iPos > 0)
  {
    iPos  := iPos + iLine;
    Str   := SubStr(Str,1,iPos-1) + SubStr(Str,iPos+iLine,length(Str)-iPos-iLine+1);
    iPos  := InStr(dblStr+dblStr, Str);
  }

  if isDel
  {
    if SubStr(Str,1,iline) = dblStr
      Str := SubStr(Str,iLine+1,length(Str)-iLine);

    if SubStr(Str,length(Str)-iLine+1,iline) = dblStr
      Str := SubStr(Str,1,length(Str)-iLine);
  }

  Result := Str;
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод прицепа
Function GetTrailer (Trailer1_Num, Trailer1_Marka, Trailer1_Garag,
                     Trailer2_Num, Trailer2_Marka, Trailer2_Garag: string): string;
{
  Result := Trailer1_Num + ' ' + Trailer1_Marka + ' ' + Trailer1_Garag +
                if (Trailer2_Num = '', '',
                    ', ' + Trailer2_Num + ' ' + Trailer2_Marka  + ' ' + Trailer2_Garag);
}

//******************************************************************************
//Вывод кол-ва МЦ содержащих алкоголь
Function GetKolSpSoprAlc (pKatSopr : comp):word;
var Kol_SpSopr_alc: word;
{
  Result := 0;

  if (GetFirst SpSopr where (( pKatSopr == SpSopr.cSopr and
                               SpSopr.cMCUSL ==  KatMC.NRec )) <> tsOk)
    Exit;

  _LOOP SpSopr where (( pKatSopr      == SpSopr.cSopr and
                        SpSopr.cMCUSL == KatMC.NRec ))
    if (GetFirst AttrNam where ((coKatMC             == AttrNam.wTable
                            AND  'содержит алкоголь' == AttrNam.Name)) = tsOk)

      if (GetFirst AttrVal where ((coKatMC      == AttrVal.wTable
                              AND  KatMC.nRec   == AttrVal.cRec
                              AND  AttrNam.nRec == AttrVal.cAttrNam)) = tsOk)
        if (Integer(AttrVal.vDouble) = 1)
          Result++;
}

//******************************************************************************
//Проверка МЦ на содержание алкоголя
Function GetIsAlc (pSpSopr : comp):boolean;
{
  Result := False;

  if (GetFirst SpSopr where (( pSpSopr       == SpSopr.NRec and
                               SpSopr.cMCUSL == KatMC.NRec )) <> tsOk)
    Exit
  else
    if (GetFirst AttrNam where ((coKatMC             == AttrNam.wTable
                            AND  'содержит алкоголь' == AttrNam.Name)) = tsOk)

      if (GetFirst AttrVal where ((coKatMC      == AttrVal.wTable
                              AND  KatMC.nRec   == AttrVal.cRec
                              AND  AttrNam.nRec == AttrVal.cAttrNam)) = tsOk)
        if (Integer(AttrVal.vDouble) = 1)
        {
          Result := True;
          Exit;
        }
}
//******************************************************************************
//Вывод количества МЦ для формы 'Справка к ТТН на спиртосодержащую продукцию'
Function GetAlcMC (Kol:double; Code:string; pSpSopr : comp):string;
{
  Result := '';

  if (InStr('лит',LoCase(Code)) <> 0)
    Result := DoubleToStr(Kol/10, Kol_Pr) + ' дал'
  else
    if (InStr('дал',LoCase(Code)) <> 0)
      Result := DoubleToStr(Kol, Kol_Pr) + ' дал';

  if (GetFirst SpSopr where (( pSpSopr == SpSopr.NRec )) <> tsOk)
    Exit;

  if (GetFirst KatOtpEd where ((SpSopr.cOtpEd == KatOtpEd.NRec)) <> tsOk)
    Exit;

  if(ExAttr.doGetAttr(coKatOtpEd, KatOtpEd.NRec, 'Количество бутылок') <> 0)
    Result += ' / ' + String(Integer(ExAttr.doGetAttr(coKatOtpEd, KatOtpEd.NRec, 'Количество бутылок'))) + ' бут';
}
//******************************************************************************
//ТТН-1, ТН-2. Вывод общего количества.
Function IsSumOtpEd (pKatSopr : comp):boolean;
var OsnOtpEd: string;
{
  if (GetFirst KatSopr where (( pKatSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  if (GetFirst SpSopr where (( KatSopr.nRec == SpSopr.cSopr )) <> tsOk)
    Exit;

  if (SpSopr.cMcUsl = 0)
  {
    Result := False;
    exit;
  }
  else
    if (SpSopr.cOtpEd = 0)
    {
      if (GetFirst KatEd where (( SpSopr.cMCUSL == KatMC.NRec AND
                                  KatMc.cEd     == KatEd.NRec)) <> tsOk)
        Exit;

      if (wGetTune('Doc.BrAbbrEd') = 0)
        OsnOtpEd:= KatEd.ABBR;
          else
        OsnOtpEd:= KatEd.Name;
    }
    else
    {
      if (GetFirst KatOtpEd where (( SpSopr.cOtpEd == KatOtpEd.NRec)) <> tsOk)
        Exit;
      if (wGetTune('Doc.BrAbbrEd') = 0)
        OsnOtpEd:= KatOtpEd.ABBR;
          else
        OsnOtpEd:= KatOtpEd.Name;
    }

  _LOOP SpSopr where (( KatSopr.nRec == SpSopr.cSopr ))
  {
    if (SpSopr.cOtpEd = 0)
      if (wGetTune('Doc.BrAbbrEd') = 0)
      {
        if (GetFirst KatEd where (( SpSopr.cMCUSL == KatMC.NRec AND
                                    KatMc.cEd     == KatEd.NRec)) <> tsOk)
          Exit;

        if (OsnOtpEd = KatEd.ABBR)
          Result := True;
        else
        {
          Result := False;
          exit;
        }
      }
      else
      {
        if (GetFirst KatEd where (( SpSopr.cMCUSL == KatMC.NRec AND
                                    KatMc.cEd     == KatEd.NRec)) <> tsOk)
          Exit;

        if (OsnOtpEd = KatEd.Name)
          Result := True;
        else
        {
          Result := False;
          exit;
        }
      }
    else
      if (wGetTune('Doc.BrAbbrEd') = 0)
      {
        if (GetFirst KatOtpEd where (( SpSopr.cOtpEd == KatOtpEd.NRec)) <> tsOk)
          Exit;

        if (OsnOtpEd = KatOtpEd.ABBR)
          Result := True;
        else
        {
          Result := False;
          exit;
        }
      }
      else
      {
        if (GetFirst KatOtpEd where (( SpSopr.cOtpEd == KatOtpEd.NRec)) <> tsOk)
          Exit;
        if (OsnOtpEd = KatOtpEd.Name)
          Result := True;
        else
        {
          Result := False;
          exit;
        }
      }
  }
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод автопредприятия
Function GetAvtoPr(AvtoPr, SobTr, GrOtpr, GrPol : string): string;
{
  Result := if (wShortAutoTR = 0, AvtoPr,
                   if (wShortAutoTR = 1, if (SobTr = 'ДА', 'Собственный транспорт', AvtoPr),
                       if (AvtoPr = GrOtpr, 'Грузоотправитель',
                           if (AvtoPr = GrPol, 'Грузополучатель', AvtoPr))));
}
//******************************************************************************
//Вывод юридического адреса автопредприятия
Function WriteAvtoPrJurAddr (pKatSopr : comp):string;
{
   Result:= '';

   if (GetFirst TTNDoc where (( coKatSopr == TTNDoc.wTable and
                                pKatSopr  == TTNDoc.cDoc )) <> tsOk)
     Exit;

   Result:= oKatOrgAttr.GetJurAddr(TTNDoc.cOrgAvt);
}

// ТТН-1, ТН-2. Вывод Адреса организации для Беларуси
Function GetOrgTTNBelAddr( Org, Org_Addr, Org2, Org2_Addr, Skl, Skl_Addr : string; wParam: word): string;
{
  if (Not c_TTN_SKL_ORG_)
    Result := if (Org_Addr <> '', ', Адрес: ' + Org_Addr, '')
  else
  {
    if (Org <> '')
      wparam := 0;

    case wParam of
      0: Result := if (Org_Addr <> '', ', Адрес: ' + Org_Addr, '');
      1: Result := GetPostAndSklad(Org2, Skl, Skl_Addr);
      2: Result := GetPostAddrAndSklad(Org2, Org2_Addr, Skl, Skl_Addr);
    end;
  }
}
//******************************************************************************
// ТТН-1, ТН-2. Вывод адреса в зависимости от настройки
Function TTNBelAddr( Org, Org_UrAddr, Org_Addr, Org2, Org2_Addr, Skl, Skl_Addr : string; wParam: word): string;
{
  if (wGetTune('Doc.SD.PrnNakl.Adr') = 0)
    Result:= GetOrgTTNBelAddr( Org, Org_UrAddr, Org2, Org2_Addr, Skl, Skl_Addr, wParam);
  else
    Result:= GetOrgTTNBelAddr( Org, Org_Addr  , Org2, Org2_Addr, Skl, Skl_Addr, wParam);
}
//******************************************************************************
// ТТН-1, ТН-2. Вывод адреса в зависимости от настройки для грузоотправителя
Function TTNBelSelfAddr( Org, Org_UrAddr, Org_Addr, Org2, Org2_Addr, Skl, Skl_Addr : string; wParam: word): string;
{
  if (wGetTune('Doc.SD.PrnNakl.SelfAdr') = 0)
    Result:= GetOrgTTNBelAddr( Org, Org_UrAddr, Org2, Org2_Addr, Skl, Skl_Addr, wParam);
  else
    Result:= GetOrgTTNBelAddr( Org, Org_Addr  , Org2, Org2_Addr, Skl, Skl_Addr, wParam);
}
//******************************************************************************
// Вывод адреса в зависимости от настройки  "Сопроводительные документы \Печать \ В формах ТТН адрес
// грузополучателя заполнять адресом пункта разгрузки"
Function GetAddr(PunktRAddr, PunktRName, Org_Addr : string): string;
{
  if not boGetTune('Doc.SD.PrnNakl.AdrPunktRazgr')
    Result := Org_Addr
  else
    if(PunktRAddr = '' or PunktRName = '')
      Result := Org_Addr
    else
      Result := PunktRAddr;
}
//******************************************************************************
// Торг-12. Вывод информации о контрагенте, стандартный (организация)
Function GetOrgFields(Org, Org_unn, Org_addr, Org_tel : string) : string;
var
  unn_ : String;
{
  unn_ := ' ' + sGetTune('KatOrg.FldView.UNN')  + ': ';

  Result := if(Org_unn  <> '', ',' + unn_  + Org_unn,  '')
          + if(Org_addr <> '', ', Адрес: ' + Org_addr, '')
          + if(Org_tel  <> '', ', тел.: '  + Org_tel,  '')
}

//******************************************************************************
// Торг-12. Вывод информации о контрагенте, стандартный с юридическим адресом (организация)
Function GetOrgFieldsUr(Org, Org_unn, Org_addr, Org_ur_addr, Org_tel : string) : string;
var
  unn_ : String;
{
  unn_  := ' ' + sGetTune('KatOrg.FldView.UNN')  + ': ';

 Result := if(Org_unn     <> '', ',' + unn_ + Org_unn, '')
         + if(Org_ur_addr <> '', ', Адрес(юрид.): ' + Org_ur_addr,
           if(Org_addr    <> '', ', Адрес: '        + Org_addr, ''))
         + if(Org_tel     <> '', ', тел.: '         + Org_tel, '')
}

//******************************************************************************
// Торг-12. Вывод информации о контрагенте, стандартный (банк)
Function GetOrgFieldsBank(Org_bank_name, Org_bank_schet, Org_bank_mfo, Org_bank_schet_rkc, Org_bank_rkc : string) : string;
var
  mfo_ : string;
{
  mfo_ := ' ' + sGetTune('KatOrg.FldView.MFO')  + ': ';

  Result := if(Org_bank_name      <> '', 'БАНК: '   + Org_bank_name,      '')
          + if(Org_bank_schet     <> '', ', р/с: '  + Org_bank_schet,     '')
          + if(Org_bank_mfo       <> '', ',' + mfo_ + Org_bank_mfo,       '')
          + if(Org_bank_schet_rkc <> '', ', к/с: '  + Org_bank_schet_rkc, '')
          + if(Org_bank_rkc       <> '', ',' + mfo_ + Org_bank_rkc,       '');
}

//******************************************************************************
#doc
  ТТН-1, ТН-2. Вывод кода УНН для организации
#end
Function GetOrgUNN( Org, OrgUnn, OrgUnn2 : string): string;
{
  if (c_TTN_SKL_ORG_)
    Result := if (Org = '', OrgUnn2, OrgUnn)
  else
    Result := OrgUnn;
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод Поставщика и склада
Function GetPostAndSklad(post, sklad, sklad_addr : string):string;
{
  Result := post + '(' + sklad + if (sklad_addr = '', '', ', ' + sklad_addr) + ')';
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод Поставщика с адресом и склада
Function GetPostAddrAndSklad(post, post_addr, sklad, sklad_addr : string):string;
{
  Result := post + GetPostAndSklad(GetOrgTTNBelAddr(post, post_addr, '', '', '', '', 0), sklad, sklad_addr);
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод Головной организации в требуемом формате
Function GetParentOrg(ParentOrg : string) : string;
{
  Result := if (ParentOrg = '', '', '(' + ParentOrg + ')');
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод основания отпуска
Function GetOsnovOtp(date_dog, date_osn: date;
                     num_dog, num_osn, osn_otp, cel_pr : string): string;
{
  Result := if (num_dog <> '', 'Договор №' + num_dog + ' от ' + DateToStr(date_dog, 'DD/MM/YYYYг. '),'') +
            if (num_osn <> '', 'Счет №'    + num_osn + ' от ' + DateToStr(date_osn, 'DD/MM/YYYYг. '),'') +
            if (osn_otp <> '', ' ' + osn_otp, '') +
            if (cel_pr  <> '', ' ' + cel_pr , '');
}

//******************************************************************************
// Торг-12. Вывод номера основания отпуска
Function GetOsnovNum(num_dog, num_n_z, num_osn : string ) : string;
{
  Result := if (num_dog <> '', num_dog,
            if (num_n_z <> '', num_n_z,
            if (num_osn <> '', num_osn, '')));
}

//******************************************************************************
// Торг-12. Вывод наименования основания отпуска
Function GetOsnovName(num_dog, num_n_z, num_osn : string) : string;
{
  Result := if (num_dog <> '', 'Договор',
            if (num_n_z <> '', 'Заказ-наряд',
            if (num_osn <> '', 'Счет', '')));
}

//******************************************************************************
// Торг-12. Вывод даты основания отпуска
Function GetOsnovDate(num_dog, num_n_z, num_osn : string; date_dog, date_n_z, date_osn : date) : string;
{
  Result := if (num_dog <> '', DateToStr(date_dog, 'DD/MM/YYYY'),
            if (num_n_z <> '', DateToStr(date_n_z, 'DD/MM/YYYY'),
            if (num_osn <> '', DateToStr(date_osn, 'DD/MM/YYYY'), '')));
}

//******************************************************************************
// Вывод даты счет-фактуры
Function GetSchFactDate(pSchFactNrec : comp) : string;
{
  Result := '';

  if (GetFirst SchFact where (( pSchFactNrec  == SchFact.NRec)) <> tsOk)
    Exit;

  Result := DateToStr(SchFact.Dfact, 'DD/MM/YYYY');
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод пункта погрузки-разгрузки
Function GetPunktFields(p_Name, p_CountryName, p_SityName, p_Addr : string): string;
{
  var PunktFields : string;

  PunktFields := p_Name
               + ', '
               + p_CountryName
               + ', '
               + p_SityName
               + ', '
               + p_Addr;

  Result := DelDblStr(PunktFields,', ',true);
}

//******************************************************************************
// Торг - 12. Вывод единицы измерения массы в накладной
Function GetwRoundMass2Str : string;
{
  Result := if (wRoundMass2 > 5, 'г.', if (wRoundMass2 > 2, 'кг.', 'т.'));
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод единицы измерения массы в накладной
Function GetwRoundMass2StrTTN : string;
{
  case wGetTune('Doc.SD.PrnNakl.MassaTTN') of
      0: result := 'т.';
      1: result := 'кг.';
      2: result := 'г.';
  end;
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод отпуск_разрешил_должность + отпуск_разрешил
Function GetOtpRaz(OptRazApp, OptRazFio : string): string;
{
  Result := OptRazApp + ' ' + OptRazFio;
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод сдал_отправитель_должность + сдал_отправитель
Function GetSdalOtp(SdalOptApp, SdalOptFio : string): string;
{
  Result := SdalOptApp + ' ' + SdalOptFio;
}

//******************************************************************************
// ТТН-1, ТН-2. Товар к перевозке принял
Function GetTovPrin(fioDover, ekspeditor, DoverApp : string): string;
{
  Result := if (fioDover = '',
                if (ekspeditor = '', '', 'экспедитор ' + ekspeditor),
                DoverApp + if (DoverApp <> '','   ','') + fioDover);
}

//******************************************************************************
// ТТН-1, ТН-2. Номер доверенности + дата
Function GetNumAndDateDover(numDover : string; dateDover : date): string;
{
  Result := numDover +
            ' ' +
            if (dateDover <> ZeroDate, DateToStr(dateDover,'от "DD" mon YYYY г.'),'');
}

//******************************************************************************
// ТТН-1, ТН-2. Организация, выдавшая доверенность
Function GetDoverOrg(numDover, fioDover, orgDover, grpol  : string; dateDover : date): string;
var org : string;
{
  org := if ((Trim(fioDover) <> '') AND (dateDover <> ZeroDate OR Trim(numDover) <> ''),
                      if (Trim(orgDover) <> '', orgDover, grpol), '');

  if (GetOrgFullName(org,'', 0) <> '')
    Result := GetOrgFullName(org, '', 0);
  else
    Result := org;
}

//******************************************************************************
// ТТН-1, ТН-2. Дата в требуемом формате
Function GetDateInF(myDate : date): string;
{
  Result := if (myDate = ZeroDate, '', DateToStr(myDate,'DD/MM/YY'));
}

//******************************************************************************
// ТТН-1, ТН-2. Время в требуемом формате
Function GetTimeInF(myTime : TTimeStr): string;
{
  Result := if (myTime = String(ZeroTime), '', myTime);
}

//******************************************************************************
// ТТН-1, ТН-2. Все документы и сертификаты
Function GetAllDoc(AllDoc1, AllDoc2, AllDoc3, AllDoc4, AllDoc5, AllCert1,
                   AllCert2, AllCert3, AllCert4, AllCert5, PriceList, sPrice : string) : string;
var
  bDocEveryStr : boolean;
{
  bDocEveryStr := boGetTune('Doc.SD.PrnNakl.DocOfGood');

  Result := if (bDocEveryStr, '', AllDoc1) +
            if (bDocEveryStr, '', AllDoc2) +
            if (bDocEveryStr, '', AllDoc3) +
            if (bDocEveryStr, '', AllDoc4) +
            if (bDocEveryStr, '', AllDoc5) +
            if (bDocEveryStr, '',
               if (AllCert1 = '', '', ' Сертификаты: ' + AllCert1)) +
            if (bDocEveryStr, '', AllCert2) +
            if (bDocEveryStr, '', AllCert3) +
            if (bDocEveryStr, '', AllCert4) +
            if (bDocEveryStr, '', AllCert5) +
            if (bDocEveryStr, '',
            if (PriceList = '', '', ' Прейскурант: ' + Trim(PriceList)) +
                                 if (sPrice    = '', '',' ' + Trim(sPrice))
               );
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод наименования матценности согласно настройки
Function GetNazvanieDop(MCName, MCKod, DopInfo, StrVvoza : string): string;
{
  Result := MCName + if (bBarKodMC, if (MCKod <> '', ' ' + MCKod, ''), '');

  if c_PROCNAC_
    if (DopInfo <> '')
      Result += ' (' + DopInfo + ')';

  if c_TTN_ALC_
    if (StrVvoza <> '')
      Result += '; ' + StrVvoza;
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод цены МЦ
//   wFR = 0 - rtf формы;
//   wFR = 1 - fr формы, рублевая;
//   wFR = 2 - fr формы, валютная;
Function GetSPriceMC(pSpSopr : comp; wFR : word; KatSopr_cVal : comp; PrMc : word;
                     CNacSN, CNacBN, CNakSN, CNakBN : double): string;
var PriceMC : double;
{
  #__UnUsed__(KatSopr_cVal)

  if wFR = 1
    c_IN_VAL_DOC_ := FALSE
  else
    if wFR = 2
      c_IN_VAL_DOC_ := TRUE;

  if c_TTN_2009R_
    PriceMC := if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNacSN, GetPrice(pSpSopr, CNacBN, CNacSN))
  else
    if c_TTN_DOC_ROZN_
      if c_IN_VAL_DOC_
        PriceMC := if (isRozn911, if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNakSN, GetPrice(pSpSopr, CNakBN, CNakSN)), CNakSN)
      else
        PriceMC := if (isRozn911, if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNacSN, GetPrice(pSpSopr, CNacBN, CNacSN)), CNacSN);
    else
      if c_IN_VAL_DOC_
        PriceMC := if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNakSN, GetPrice(pSpSopr, CNakBN, CNakSN))
      else
        PriceMC := if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNacSN, GetPrice(pSpSopr, CNacBN, CNacSN));

  Result := DoubleToStr(PriceMC, if( c_IN_VAL_DOC_, if(GetPrecisionGroup('brForSoprTTN_RVPrice')<> 5, Cena_PrTTN, Cena_Pr), if(GetPrecisionGroup('brForSoprTTN_Price')<> 5, Cena_PrRTTN, Cena_PrR)));
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод цены МЦ без строки формата
//   wFR = 0 - rtf формы;
//   wFR = 1 - fr формы, рублевая;
//   wFR = 2 - fr формы, валютная;
Function GetDPriceMC(pSpSopr : comp; wFR, PrMc : word; CNacSN, CNacBN, CNakSN, CNakBN : double): double;
{
  if wFR = 1
    c_IN_VAL_DOC_ := FALSE
  else
    if wFR = 2
      c_IN_VAL_DOC_ := TRUE;

  if c_TTN_2009R_
    Result := if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNacSN, GetPrice(pSpSopr, CNacBN, CNacSN))
  else
    if c_TTN_DOC_ROZN_
      if c_IN_VAL_DOC_
        Result := if (isRozn911, if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNakSN, GetPrice(pSpSopr, CNakBN, CNakSN)), CNakSN)
      else
        Result := if (isRozn911, if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNacSN, GetPrice(pSpSopr, CNacBN, CNacSN)), CNacSN);
    else
      if c_IN_VAL_DOC_
        Result := if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNakSN, GetPrice(pSpSopr, CNakBN, CNakSN))
      else
        Result := if ((bNalProd OR bFixGrMC) AND (PrMc = 1), CNacSN, GetPrice(pSpSopr, CNacBN, CNacSN));
}

//******************************************************************************
// Вывод цены с налогами МЦ ПИР 101.47748
//   cena -  цена с налогами
//
// расчет налогов производится как 100 / ( 100 + P) для случая, когда налог входит в цену и только для налога НДС
Function GetPrice(pSpSopr : comp; cenaBN : double; cenaSN : double): double;
{
  Result := cenaBN;

  if (wGetTune('Doc.SD.PrnNakl.AlgPrice') = 0)
    Exit;

  if (GetFirst SpSopr where (( pSpSopr  ==  SpSopr.NRec )) <> tsOk)
    Exit;

  if (SpSopr.ManualTax <> 0)
    Exit;

  if (GetFirst KatSopr where (( SpSopr.cSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  if (KatSopr.VhodNal <> 1)
    Exit;

  if (GetFirst SpDocNal where (( pSpSopr           == SpDocNal.cSpDoc and
                                  KatSopr.VidSopr  == SpDocNal.TipDoc )) <> tsOk)
    Exit;

  if (GetNext SpDocNal where (( pSpSopr          == SpDocNal.cSpDoc and
                                 KatSopr.VidSopr == SpDocNal.TipDoc )) = tsOk)
    Exit;

  if (GetFirst SpDocNal where (( pSpSopr                      == SpDocNal.cSpDoc and
                                  KatSopr.VidSopr             == SpDocNal.TipDoc and
                                  coGetTune('Nalog.cNalogNDS') == SpDocNal.cNalog)) <> tsOk)
    Exit;

  if (GetNext SpDocNal where (( pSpSopr          == SpDocNal.cSpDoc and
                                 KatSopr.VidSopr == SpDocNal.TipDoc )) = tsOk)
    Exit;

  if (boGetTune('Nalog.NoRoundNDS'))
    Result := (cenaSN * 100) / (100 + SpDocNal.Nalog)
  else
    case word(SpDocNal.Nalog) of
      10: Result := cenaSN * ( 1 - 0.0909 );
      18: Result := cenaSN * ( 1 - 0.1525 );
      20: Result := cenaSN * ( 1 - 0.1667 );
    else
      Result := cenaSN * 100 / (100 + SpDocNal.Nalog);
    end;
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод стоимости МЦ
//   wFR = 0 - rtf формы;
//   wFR = 1 - fr формы, рублевая;
//   wFR = 2 - fr формы, валютная;
Function GetSSummaMC(wFR, PrMc : word; StNacSN0, StNacBN0, StNakSN, StNakBN : double): string;
var StNacSN, StNacBN : double;
{
  if wFR = 1
    c_IN_VAL_DOC_ := FALSE
  else
    if wFR = 2
      c_IN_VAL_DOC_ := TRUE;

  if c_IN_VAL_DOC_
  {
    StNacBN  := StNakBN;
    StNacSN  := StNakSN;
  }
  else
  {
    StNacBN  := StNacBN0;
    StNacSN  := StNacSN0;
  }

  if c_TTN_2009R_
    Result := DoubleToStr(0/*Стоимость6*/, if( c_IN_VAL_DOC_, Cena_Pr, Cena_PrR)) //при включенном "_TTN_2009R_". Должна быть рассчитана переменная "Стоимость6"
  else
    if c_TTN_DOC_ROZN_
      Result := DoubleToStr (if (isRozn911, if ((bNalProd OR bFixGrMC) AND (PrMc = 1), StNacSN, StNacBN), StNacSN),
                                                                                   if( c_IN_VAL_DOC_, Cena_Pr, Cena_PrR));
    else
      Result := DoubleToStr (if ((bNalProd OR bFixGrMC) AND (PrMc = 1), StNacSN, StNacBN),
                                                          if( c_IN_VAL_DOC_, Cena_Pr, Cena_PrR));
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод стоимости МЦ без строки формата
//   wFR = 0 - rtf формы;
//   wFR = 1 - fr формы, рублевая;
//   wFR = 2 - fr формы, валютная;
Function GetDSummaMC(wFR, PrMc : word; StNacSN0, StNacBN0, StNakSN, StNakBN : double): double;
var StNacSN, StNacBN : double;
{
  if wFR = 1
    c_IN_VAL_DOC_ := FALSE
  else
    if wFR = 2
      c_IN_VAL_DOC_ := TRUE;

  if c_IN_VAL_DOC_
  {
    StNacBN  := StNakBN;
    StNacSN  := StNakSN;
  }
  else
  {
    StNacBN  := StNacBN0;
    StNacSN  := StNacSN0;
  }

  if c_TTN_2009R_
    Result := 0 /*Стоимость6 при включенном "_TTN_2009R_". Должна быть рассчитана переменная "Стоимость6"*/
  else
    if c_TTN_DOC_ROZN_
      Result := if (isRozn911, if ((bNalProd OR bFixGrMC) AND (PrMc = 1), StNacSN, StNacBN), StNacSN)
    else
      Result := if ((bNalProd OR bFixGrMC) AND (PrMc = 1), StNacSN, StNacBN);
}

//******************************************************************************
// ТТН-1, ТН-2. Ставка налога
Function GetStavkaNal(PrNDS : word; StNDS : double): string;
{
  if (not c_TTN_2009R_)
    Result := if (PrNDS = 0, sNameNDSStZero, DoubleToStr(StNDS, NDS_St))
  else
    Result := if (0/*СтавкаНДС7*/ = 0, '', DoubleToStr(0/*СтавкаНДС7*/, '66.88'));//при включенном "_TTN_2009R_". Должна быть рассчитана переменная "СтавкаНДС7"
}

//******************************************************************************
// ТТН-1, ТН-2. Сумма НДС
Function GetSumNds(wFR : word; PrNDS : word; StNDSNac, StNDSNak : double): string;
{
  if wFR = 1
    c_IN_VAL_DOC_ := FALSE
  else
    if wFR = 2
      c_IN_VAL_DOC_ := TRUE;

  if c_TTN_2009R_
    Result := if (0/*СуммаНДС8*/ = 0, '', DoubleToStr(0/*СуммаНДС8*/, if( c_IN_VAL_DOC_, Cena_Pr, Cena_PrR)))
  else
    if c_IN_VAL_DOC_
      Result := if (PrNDS = 0, sNameNDSSummZero, DoubleToStr(StNDSNak, if( c_IN_VAL_DOC_, Cena_Pr, Cena_PrR)));
    else
      Result := if (PrNDS = 0, sNameNDSSummZero, DoubleToStr(StNDSNac, if( c_IN_VAL_DOC_, Cena_Pr, Cena_PrR)));
}

//******************************************************************************
// ТТН-1, ТН-2. Сумма НДС без строки формата
Function GetDSumNds(wFR : word; PrNDS : word; StNDSNac, StNDSNak : double): double;
{
  if wFR = 1
    c_IN_VAL_DOC_ := FALSE
  else
    if wFR = 2
      c_IN_VAL_DOC_ := TRUE;

  if c_TTN_2009R_
    Result := 0/*СуммаНДС8*/
  else
    if c_IN_VAL_DOC_
      Result := if (PrNDS = 0, 0, StNDSNak)
    else
      Result := if (PrNDS = 0, 0, StNDSNac)
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод стоимости МЦ с ндс
//   wFR = 0 - rtf формы;
//   wFR = 1 - fr формы, рублевая;
//   wFR = 2 - fr формы, валютная;
Function GetSSummaMCsNDS(wFR : word; StNacSN0, StNakSN : double): string;
{
  var StNacSN : double;

  if wFR = 1
    c_IN_VAL_DOC_ := FALSE
  else
    if wFR = 2
      c_IN_VAL_DOC_ := TRUE;

  if c_IN_VAL_DOC_
    StNacSN := StNakSN
  else
    StNacSN := StNacSN0;

  Result := DoubleToStr(StNacSN, if( c_IN_VAL_DOC_, Cena_Pr, Cena_PrR));
}

//******************************************************************************
// ТТН-1, ТН-2. Вывод стоимости МЦ с ндс без строки формата
//   wFR = 0 - rtf формы;
//   wFR = 1 - fr формы, рублевая;
//   wFR = 2 - fr формы, валютная;
Function GetDSummaMCsNDS(wFR : word; StNacSN0, StNakSN : double): double;
{
  if wFR = 1
    c_IN_VAL_DOC_ := FALSE
  else
    if wFR = 2
      c_IN_VAL_DOC_ := TRUE;

  if c_IN_VAL_DOC_
    Result := StNakSN
  else
    Result := StNacSN0;
}

//******************************************************************************
// 1-Т, ТОРГ-12. Вывод наименования единицы измерения, количества, кода единицы измерения
//в зависимости от настройки "Настройки Галактики \ Логистика \ Документы \ Сопроводительные
//документы \ Печать \ Единица измерения в формах Торг-12 и 1-Т"
Function NastrEdIzm(EdIzmU, EdIzmO : string): string;
{
  Result:= If (wGetTune('DOC.SD.PRNNAKL.EDIZM') = 0, EdIzmU, EdIzmO)
}

//******************************************************************************
// 1-Т, ТОРГ-12. Вывод цены в зависимости от настройки "Настройки Галактики \ Логистика \
//Документы \ Сопроводительные документы \ Печать \ Единица измерения в формах Торг-12 и 1-Т"
Function NastrEdIzmP(pSpSopr: comp; wFR : word; PrMc : word; CNacSN, CNacBN, CNakSN, CNakBN, CNacSNUch, CNacBNUch, CNakSNUch, CNakBNUch: double): double;
{
  if (wGetTune('DOC.SD.PRNNAKL.EDIZM') = 0)
    Result := GetDPriceMC(pSpSopr, 0, PrMc, CNacSNUch, CNacBNUch, CNakSNUch, CNakBNUch)
  else
    Result := GetDPriceMC(pSpSopr, 0, PrMc, CNacSN, CNacBN, CNakSN, CNakBN);
}

//******************************************************************************
// ТТН-1, ТН-2. количество грузовых мест
Function GetKolGrM(PrMc : word; GrMKol, KolF : double): string;
var
  KolGrM : string;
{

  if (PrMc > 1)
    KolGrM := '-'
  else
    if (bAutoGrM)
      KolGrM := if (GrMKol = 0, '-', DoubleToStr(GrMKol, RoundGrm))
    else
      KolGrM := DoubleToStr(if(GrMKol <> 0, GrMKol, KolF), RoundGrm);

  Result := if (KolGrM = '-', '', KolGrM);
}


//******************************************************************************
// ТТН-1, ТН-2. количество грузовых мест без строки формата
Function GetDKolGrM(PrMc : word; GrMKol, KolF : double): double;
{
  if (PrMc > 1)
    Result := 0
  else
    if bAutoGrM
      Result := if (GrMKol = 0, 0, GrMKol)
    else
      Result := if(GrMKol <> 0, GrMKol, KolF);
}


//******************************************************************************
// Масса брутто
Function GetMassaBr(PrMc : word; KolVes : double): string;
{
  if (PrMc > 1)
    Result := ''
  else
    if c_TTN_ALC_
      Result := DoubleToStr(KolVes, Massa_Kg)
    else
      case wRoundMass2 of
        0..2 : Result := DoubleToStr(KolVes / 1000, Massa_Tn);
        3..5 : Result := DoubleToStr(KolVes       , Massa_Kg);
        6..12: Result := DoubleToStr(KolVes * 1000, Massa_Gr);
      end;
}

//******************************************************************************
// ТТН-1. Масса брутто
Function GetMassaBrTTN(PrMc : word; KolVes : double): string;
{
  if (PrMc > 1)
  {
    result := '';
  }
  else
    if c_TTN_ALC_
      result := DoubleToStr(KolVes, Massa_Tn);
    else
    {
      case wGetTune('Doc.SD.PrnNakl.MassaTTN') of
          0: result := DoubleToStr(KolVes / 1000, Massa_Tn);
          1: result := DoubleToStr(KolVes, Massa_Tn);
          2: result := DoubleToStr(KolVes * 1000, Massa_Tn);
      end;
    }
}

//******************************************************************************
// Масса брутто без строки формата
Function GetDMassaBr(PrMc : word; KolVes : double): double;
{
  if (PrMc > 1)
    Result := 0
  else
    if c_TTN_ALC_
      Result := KolVes;
    else
      case wRoundMass2 of
        0..2 : Result := KolVes / 1000;
        3..5 : Result := KolVes;
        6..12: Result := KolVes * 1000;
      end;
}

//******************************************************************************
// ТТН-1. Масса брутто без строки формата
Function GetDMassaBrTTN(PrMc : word; KolVes : double): double
;
{
  if (PrMc > 1)
  {
    result := 0;
  }
  else
    if c_TTN_ALC_
      result := KolVes;
    else
    {
      case wGetTune('Doc.SD.PrnNakl.MassaTTN') of
        0: result := KolVes / 1000;
        1: result := KolVes;
        2: result := KolVes * 1000;
      end;
    }
}

//******************************************************************************
// ТТН-1, ТН-2. Возвращает строку с наименованием валюты
Function GetVal_rub(cVal : comp): string;
{
  if getfirst KlVal where ((cVal == KlVal.nRec)) = tsOk
    Result := Klval.DOLLAR + ';' + Klval.DOLLARA + ';' + Klval.DOLLAROV
  else
    Result := 'рубль;рубля;рублей';
}

//******************************************************************************
// ТТН-1, ТН-2. Возвращает строку с наименованием копеек валюты
Function GetVal_kop(cVal : comp): string;
{
  if getfirst KlVal where ((cVal == KlVal.nRec)) = tsOk
    Result := Klval.CENT + ';' + Klval.CENTA + ';' + Klval.CENTOV
  else
    Result := 'копейка;копейки;копеек';
}

//******************************************************************************
// общая функциональность. Возвращает запись таблицы KatSopr
Function GetKatSopr(pKatSopr: comp; var bufKatSopr: type$KatSopr): boolean;
{
  Result := False;

  if (GetFirst KatSopr where (( pKatSopr == KatSopr.NRec )) <> tsOk)
    Exit;

  bufKatSopr := KatSopr.Buffer;

  Result := True;
}

//******************************************************************************
// общая функциональность. Возвращает запись таблицы SpSopr
Function GetSpSopr(pSpSopr: comp; var bufSpSopr: type$SpSopr): boolean;
{
  Result := False;

  if (GetFirst SpSopr where (( pSpSopr == SpSopr.NRec )) <> tsOk)
    Exit;

  bufSpSopr := SpSopr.Buffer;

  Result := True;
}

//******************************************************************************
// общая функциональность. Возвращает ФИО и должность
Procedure GetFIOPost(pPersons: comp; var sFIO, sPost: string);
{
  sPost := sFIO  := '';

  if (GetFirst Persons where (( pPersons == Persons.NRec )) = tsOk)
  {
    sFIO := Persons.FIO;

    if (GetFirst Appointments where (( Persons.AppointCur == Appointments.Nrec )) = tsOk)
      if (GetFirst Catalogs where (( Appointments.Post == Catalogs.Nrec )) = tsOk)
        sPost := Catalogs.Name;
  }
}

//******************************************************************************
//Возвращает через var-параметры наименование и количество ДЕИ по его номеру
//  pSpSopr - Ссылка на SpSopr
//  num     - Номер ДЕИ, который надо вывести
//  deiName - Наименование ДЕИ
//  deiKol  - Количество в ДЕИ
Procedure GetDeiField(pSpSopr : comp; num : word; var deiName: string; var deiKol : string);
{
  set cSpSopr := pSpSopr;

  deiName := deiKol := '';

  if( num < 1 )
    num := 1;

  var numRow : word ;

  numRow := 1;

  if (GetFirst SpDopEd = tsOk)
  {
    deiName := KatDopEd.Name;
    deiKol  := DoubleToStr(SpDopEd.kol, Kol_Pr);

    while (numRow < num)
    {
      if(GetNext SpDopEd = tsOk)
      {
        deiName := KatDopEd.Name;
        deiKol  := DoubleToStr(SpDopEd.kol, Kol_Pr);
      }
      else
      {
        deiName := '';
        deiKol  := '';
        break;
      }

      numRow++;
    }
  }
}

//******************************************************************************
#include ShowKau.vpp
//******************************************************************************

Function GetKAUField(pSpSopr : comp; pNum : integer) : string;
{
  set cSpSopr := pSpSopr;

  Result := #ShowKau(if(pNum = 1, SaldTune.wObj, SaldTune.wKau[pNum - 1]), if(pNum = 1, SpecMTR.cObj, SpecMTR.cKau[pNum - 1]));
}

//******************************************************************************
//  Возвращает Массив из 20 строк, сформированный из Memo-поля
Function LoadMemoToArray(var S : TLongStrArray; cRecMemo : comp; wTableMemo : word) : boolean;
var
  i   : byte;
  iPos: longint;
{
  for(i := 1; i <= 20; i++)
    S[i] := '';

  if (GetFirst AllMemo where (( wTableMemo == AllMemo.wTable and
                                cRecMemo   == AllMemo.cRec )) <> tsOk)
  {
    Result := FALSE;
    Exit;
  }

  i := 1;

  if fMemo.OpenMemo(AllMemo.Mem)
    while ((not fMemo.Eof) or (i <= 20)) do
      {
        iPos := fMemo.GetPos;

        fMemo.ReadLn(S[i]);

        iPos := fMemo.GetPos - iPos - 2; // сколько символов прочитано

        if (iPos > 255) // в текущей стоке мемо больше 255 символов
          {
            fMemo.Seek(fMemo.GetPos - (iPos - 255) - 2);
            i++;
            Continue;
          }

        if (Length(S[i]) < 255)
          S[i] += ' '
        else
          S[++i] := ' ';

        i++;
      }

  fMemo.Close;

  Result := TRUE;
}

//******************************************************************************
//  Возвращает № вагона
//   wParam = 0 - вагон из шапки
//   wParam = 1 - вагон из шапки + вагоны из спецификации
//   wParam = 2 - вагоны только из спецификации
Function GetVagon(pKatSopr : comp; wParam : word) : string;
{
  Result := '';

  if (GetFirst KatSopr where (( pKatSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  if (wParam = 0)
  {
    Result := KatSopr.nVagon;
    Exit;
  }

  if (wParam = 1)
    Result := ' ' + KatSopr.nVagon + ' ';

  if (wParam = 1 or wParam = 2)
    _LOOP SpSopr where (( KatSopr.nRec == SpSopr.cSopr ))
      if (InStr(' ' + SpSopr.nVagon + ' ', Result) = 0)
        Result += if(SpSopr.nVagon <> '', if(Result <> '', ', ' + SpSopr.nVagon + ' ', ' ' + SpSopr.nVagon + ' '), '');
}

//******************************************************************************
//  Возвращает № пломбы
//******************************************************************************
Function GetPlomba(pKatSopr : comp) : string;
{
  Result := '';

  if (GetFirst TTNDoc where (( coKatSopr == TTNDoc.wTable and
                               pKatSopr  == TTNDoc.cDoc )) <> tsOk)
    Exit;

  Result := ExAttr.sGetAttr(coTTNDoc, TTNDoc.NRec, '№ ПЛОМБЫ');
}

//******************************************************************************
//  Код по ОКЕИ в российский формах
//******************************************************************************
Function GetUthEdKod(pKatMC : comp) : string;
{
  Result := '';

  if (GetFirst SpSopr where (( pKatMC == SpSopr.Nrec )) = tsOk)
    if (GetFirst KatMC where (( SpSopr.cMCUsl == KatMC.Nrec )) = tsOk)
      if (GetFirst KatEd where ((KatMC.cEd == KatEd.NRec )) = tsOk)
        Result := ExAttr.sGetAttr(coKatEd, KatEd.NRec, 'Код');
}

//******************************************************************************
//  Возвращает Единицу подвижного состава
Function GetEdPodvSost(pCellVal : comp) : string;
{
  Result := '';

  if (GetFirst MoveCell where (( pCellVal == MoveCell.NRec )) = tsOk)
    Result := MoveCell.Name;
}

Function GetCodeFromKau(pSpSopr : comp; pNum : integer) : string;
{
  Result := '';

  set cSpSopr := pSpSopr;

  if(pNum = 1)
  {
    if(GetFirst SpKau where (( SpecMTR.cObj == SpKau.nRec)) = tsOk )
      Result := SpKau.Code;
  }
  else
    if((pNum > 1) and (pNum <= 10))
      if(GetFirst SpKau where (( SpecMTR.cKau[--pNum] == SpKau.nRec)) = tsOk )
        Result := SpKau.Code;
}

//******************************************************************************
// общая функциональность. Возвращает запись таблицы Dogovor
Function GetDogovor(pDogovor: comp; var bufDogovor: type$Dogovor): boolean;
{
  Result := False;

  if (GetFirst Dogovor where (( pDogovor == Dogovor.NRec )) <> tsOk)
    Exit;

  bufDogovor := Dogovor.Buffer;

  Result := True;
}

//******************************************************************************
// общая функциональность. Возвращает объекты строительства через запятую.
Function GetObStroit(pKatSopr : comp) : string;
{
  var sObStroit, sOb : string;

  Result := '';

  if(GetFirst KatSopr where (( pKatSopr == KatSopr.NRec )) = tsOk)
    _loop SpSopr where (( KatSopr.NRec == SpSopr.cSopr ))
      {
        sOb := ShowKau(cgKau_ObjBuild, oMTRFun.GetObjUKS(coSpSopr, SpSopr.NRec));

        Result += if(sObStroit = '', sOb, If(sOb <> '', '; ' + sOb, ''));
      }
}

//******************************************************************************
// общая функциональность. Возвращает серийные номера, привязанные
// к позиции спецификации накладной.
Function GetSN(pSpSopr: comp) : string;
{
  set cSpSopr := pSpSopr;

  Result := '';

  _loop SpCardSN
    Result += if(Result = '', CardSN.Serial, ', ' + CardSN.Serial);
}

//******************************************************************************
Function GetInvNum(bufKatSopr: type$KatSopr; bufSpSopr: type$SpSopr) : string;
{
  #__UnUsed__(bufSpSopr)

  KatSopr.Buffer := bufKatSopr;

  if (KatSopr.cIzd = 0)
    Result := ''
  else
    Result := vo_ObjRemFunc.fncInvNumOR(KatSopr.cIzd);
}

//******************************************************************************
// общая функциональность. Возвращает значение состояния документа (акта о приемке материалов)
Function GetReserved(pKatSopr : comp) : word;
{
  Result := 0;

  if ( GetFirst KatSopr where (( pKatSopr == KatSopr.NRec )) = tsOk )
    if ( KatSopr.VidSopr = 115 )
      Result := KatSopr.Reserved;
}

//******************************************************************************
// функция возвращает имя организации с типом или без в зависимости от
// системной настройки ("Представление наименования организаций при печати документов")
// wParam = 0 наименование и тип
// wParam = 1 левая часть наименования
// wParam = 2 правая часть наименования
Function GetOrgFullName (sName, sTip: string; wParam: word) :string;
{
  var sFName: string;

  Result := '';

  case wGetTune('REP.KATORGNAME') of
    1:  // "тип-наименование"
    {
      if (Pos(sTip, sName)) <> 0
        sName := Substr(sName, Length(sTip)+2, Length(sName));

      if getfirst KatOrg where (( sName == KatOrg.Name )) = tsOk
      {
        if wParam = 0
          Result := Trim(KATORG.TipOrg) + if(Trim(KATORG.TipOrg) = '', '', ' ') + Trim(KatOrg.Name)
        else
          if wParam = 1
            Result := Trim(KATORG.TipOrg)
          else
            Result := Trim(KatOrg.Name);
      }
    }
    2:  // "наименование-тип"
    {
      if (Pos(sTip, sName)) <> 0
        sName := Substr(sName, 1, Length(sName)-Length(sTip)-1);

      if getfirst KatOrg where (( sName == KatOrg.Name )) = tsOk
      {
        if wParam = 0
          Result := Trim(KatOrg.Name) + if(Trim(KATORG.TipOrg) = '', '', ' ' + Trim(KatOrg.Name))
        else
          if wParam = 1
            Result := Trim(KatOrg.Name)
          else
            Result := Trim(KATORG.TipOrg);
      }
    }
    else // "наименование"
    {
      if getfirst KatOrg where (( sName == KatOrg.Name )) = tsOk
      {
        if wParam = 2
          Result := ''
        else
          Result := Trim(KatOrg.Name);
      }
    }
  end; //case
}

//******************************************************************************
// для корректир.документов
Function GetKDKolOld (pSpSopr : comp): double;
{
  Result := 0;

  if (GetFirst SpSopr where (( pSpSopr  == SpSopr.NRec)) <> tsOk)
    Exit;

  Result := oCorrDocFun.GetKDKolOld(SpSopr.cADocSp, SpSopr.cSopr);
}

//******************************************************************************
// для корректир.документов
Function GetKDKolNew (pSpSopr : comp): double;
{
  if (GetFirst SpSopr where (( pSpSopr  == SpSopr.NRec)) = tsOk)
    Result := oCorrDocFun.GetKDKolOld(SpSopr.cADocSp, SpSopr.cSopr) + if (SpSopr.Kol <> 0, SpSopr.KolFact, 0)
  else
    Result := 0;
}

//******************************************************************************
// для корректир.документов
Function GetKDPriceOld (pSpSopr : comp): double;
{
  Result := (GetKDSummaOld2(pSpSopr) - GetKDNalogOld(pSpSopr)) / GetKDKolOld(pSpSopr);
}

//******************************************************************************
// для корректир.документов
Function GetKDPriceNew (pSpSopr : comp): double;
{
  Result := (GetKDSummaNew2(pSpSopr) - GetKDNalogNew(pSpSopr)) / GetKDKolNew(pSpSopr);
}

//******************************************************************************
// для корректир.документов
Function GetKDNalogOld (pSpSopr : comp): double;
{
  Result := 0;

  if (GetFirst SpSopr where (( pSpSopr  == SpSopr.NRec)) <> tsOk)
    Exit;

  if (GetFirst KatSopr where (( SpSopr.cSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  Result := oCorrDocFun.GetKDNalogOld(SpSopr.cADocSp, SpSopr.cSopr, KatSopr.cVal);
}

//******************************************************************************
// для корректир.документов
Function GetKDNalogNew (pSpSopr : comp): double;
{
  Result := 0;

  if (GetFirst SpSopr where (( pSpSopr  == SpSopr.NRec)) <> tsOk)
    Exit;

  if (GetFirst KatSopr where (( SpSopr.cSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  Result := if (KatSopr.cVal = 0, SpSopr.SumNDS, SpSopr.SumVNDS) + oCorrDocFun.GetKDNalogOld(SpSopr.cADocSp, SpSopr.cSopr, KatSopr.cVal);
}

//******************************************************************************
// для корректир.документов
Function GetKDSummaOld (pSpSopr : comp): double;
{
  Result := 0;

  if (GetFirst SpSopr where (( pSpSopr  == SpSopr.NRec)) <> tsOk)
    Exit;

  if (GetFirst KatSopr where (( SpSopr.cSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  Result := oCorrDocFun.GetKDSummaOld(SpSopr.cADocSp, SpSopr.cSopr, KatSopr.cVal) + if (KatSopr.Vhodnal = 1, 0, GetKDNalogOld(pSpSopr));
}

//******************************************************************************
// для корректир.документов (без округления)
Function GetKDSummaOld2 (pSpSopr : comp): double;
{
  Result := 0;

  if (GetFirst SpSopr where (( pSpSopr  == SpSopr.NRec)) <> tsOk)
    Exit;

  if (GetFirst KatSopr where (( SpSopr.cSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  Result := oCorrDocFun.GetKDSummaOld2(SpSopr.cADocSp, SpSopr.cSopr, KatSopr.cVal) + if (KatSopr.Vhodnal = 1, 0, GetKDNalogOld(pSpSopr));
}

//******************************************************************************
// для корректир.документов
Function GetKDSummaNew (pSpSopr : comp): double;
{
  Result := 0;

  if (GetFirst SpSopr where (( pSpSopr  == SpSopr.NRec)) <> tsOk)
    Exit;

  if (GetFirst KatSopr where (( SpSopr.cSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  Result := if (KatSopr.cVal = 0, SpSopr.Price, SpSopr.VPrice) * SpSopr.KolOpl
          + oCorrDocFun.GetKDSummaOld(SpSopr.cADocSp, SpSopr.cSopr, KatSopr.cVal)
          + if (KatSopr.Vhodnal = 1, 0, GetKDNalogNew(pSpSopr));
}

//******************************************************************************
// для корректир.документов
Function GetKDSummaNew2 (pSpSopr : comp): double;
{
  Result := 0;

  if (GetFirst SpSopr where (( pSpSopr  == SpSopr.NRec)) <> tsOk)
    Exit;

  if (GetFirst KatSopr where (( SpSopr.cSopr == KatSopr.Nrec )) <> tsOk)
    Exit;

  Result := if (KatSopr.cVal = 0, SpSopr.Price, SpSopr.VPrice) * SpSopr.KolOpl
          + oCorrDocFun.GetKDSummaOld2(SpSopr.cADocSp, SpSopr.cSopr, KatSopr.cVal)
          + if (KatSopr.Vhodnal = 1, 0, GetKDNalogNew(pSpSopr));
}

//******************************************************************************
// для корректир.документов
Function GetValCode (pKlVal : comp): string;
{
  Result := '';

  if (GetFirst KlVal where (( pKlVal  == KlVal.NRec)) <> tsOk)
    Exit;

  Result := KlVal.ISO;
}

//******************************************************************************
// для корректир.документов
Function GetValName (pKlVal : comp): string;
{
  Result := '';

  if (GetFirst KlVal where (( pKlVal  == KlVal.NRec )) <> tsOk)
    Exit;

  Result := KlVal.Dollar;
}

//******************************************************************************
// Главный бухгалтер
Function GetGlBuhName(pKatSopr : comp; sBuhName: string) : string;
{
  Result := '';

  if ( GetFirst KatSopr where (( pKatSopr == KatSopr.NRec )) = tsOk )
    if ( KatSopr.TipSopr <> 1 ) // приходный документ
      Result := sBuhName;
}

HandleEvent

cmOnVipLoad:
{
  Kol_Pr := '[|-]3666666666666666';

  var ii, nn : word;

  nn := GetDlinaDrob_forKol;

  for (ii:=1; ii<=nn; ii++)
    Kol_Pr += if (ii = 1, '.8', '8');

  Kol_Pr := '\' + string(nn) + 'p' + Kol_Pr;

  sNameFPrice      := sGetTune('Doc.SD.AbbrField.FPrice');
  sNameProcSN      := sGetTune('Doc.SD.AbbrField.ProcSN');
  sNameNP          := sGetTune('Doc.SD.AbbrField.NP');
  sNameNPStavka    := sGetTune('Doc.SD.AbbrField.NPStavka');
  sNameNPStZero    := sGetTune('Doc.SD.AbbrField.NPStZero');
  sNamePriceDO     := sGetTune('Doc.SD.AbbrField.PriceDO');
  sNameProcDO      := sGetTune('Doc.SD.AbbrField.ProcDO');
  sNamePriceList   := sGetTune('Doc.SD.AbbrField.PriceList');
  sNameNDSStZero   := sGetTune('Doc.SD.AbbrField.NDSStZero');
  sNameNDSSummZero := sGetTune('Doc.SD.AbbrField.NDSSummZero');
}

End; // HandleEvent Interface

End.
