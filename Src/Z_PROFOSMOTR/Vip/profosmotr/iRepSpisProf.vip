#doc
Формирование отчета
"Список профессий (должностей) работающих, подлежащих периодическим медосмотрам"(Белтелеком)
#end

#include iCheckFactorRez.vih

Interface iRepSpisProf 'Выбор подписантов' Gray, DoAccept, EscClose;
  Show at (, , 50, 13);

var
wYear,wtipcalc, wMakroPageRun:word;
objCheckFactorRez: iCheckFactorRez new;
sFioRuk:string;
cPer1 :comp;

file file_macro;

table struct tmpMain
(
 coPers   : comp
,coNabor  : comp
,coStrPodr: comp
,coProf   : comp
)
with index
(
 tmpMain01 = coStrPodr+coProf+coPers
,tmpMain02 = coStrPodr+coProf+coNabor
,tmpMain03 = coPers+coNabor
);

Create view
as select
*
from
 Persons (ReadOnly)
,DISTDOCHIERARCHY DISTDOCHIERARCHYfactorPers (ReadOnly)
,Catalogs (ReadOnly)
,Appointments          (ReadOnly)
,tmpMain
,tmpMain tmpMainCalc
,tmpMain tmpMainAll
,DISTDOCHIERARCHY DDHfactorPersAll            (ReadOnly)
,Persons PersonsCheck (ReadOnly)
Where
((
    'С'             == Persons.ISEMPLOYEE
and date(0,0,0)     == Persons.DISDATE              //без даты увольнения

and Persons.nrec    == DISTDOCHIERARCHYfactorPers.CPARENT
and constFactorPers == DISTDOCHIERARCHYfactorPers.WDOCTYPE
and (DISTDOCHIERARCHYfactorPers.RESDATE=date(0,0,0) and DISTDOCHIERARCHYfactorPers.WSORT=word(0))  //обрабатываем все без даты закрытия

and Persons.AppointCur == Appointments.Nrec
))
;

Screen scrRepSpisProf ('Выбор подписантов', ,);
Fields
  wYear   ('Год',,sci13EnEsc) : nostatic, noprotect, SpinButton [1,1,4000];
  wtipcalc ('В случае если обнаружен фактор требующий медосмотра, включать только его или и все остальные факторы сотрудника...'):noprotect;
  sFioRuk ('ФИО руководителя', , sci13EnEsc) : protect;
  wMakroPageRun  ('Применить макрос подгонки страницы к печати',,sci1Esc): NoProtect;
Buttons
  cmOk, Default,, 'Продолжить',, sci1Esc;
  cmCancel,,,'Отмена',, sci1Esc;
<<
                `Год:  `    .@@@@@

           `Вариант обработки факторов:`
           (.) Каждый фактор отдельно`
           (.) Все факторы вместе`

    `ФИО руководителя:`    .@@@@@@@@@@@@@@@@@@@@@

    [.] Применить макрос подгонки страницы к печати`

         <. Продолжить .>  <.   ~О~тмена   .>
>>
end;

Function CheckYear: boolean;
{
  CheckYear:=false;
   if(wYear>2100 or wYear<2000)
     {
       message('Укажите год в пределах от 2000 до 2100.');
       exit;
     }
  CheckYear:=true;
}

Procedure CheckFactorPers;
{
 _loop Persons
   {
     _loop  DISTDOCHIERARCHYfactorPers
      {
        if(objCheckFactorRez.FactorInclude(DISTDOCHIERARCHYfactorPers.nrec,wYear))
          {
            ClearBuffer(#tmpMain);
            tmpMain.coPers   :=  Persons.nrec;
            tmpMain.coNabor  :=  DISTDOCHIERARCHYfactorPers.CANVAL1;
            tmpMain.coStrPodr:=  Persons.Department;
            if(getfirst Appointments =tsok)
             {
              tmpMain.coProf:= Appointments.Post;
             }
            if(insert current tmpMain=tsok and wtipcalc=1)     //если обрабатываем все факторы вместе, то нужно добавить все недостающие факторы
              {
               _loop DDHfactorPersAll where ((Persons.nrec  == DDHfactorPersAll.CPARENT
                                        and constFactorPers == DDHfactorPersAll.WDOCTYPE
                                        and (DDHfactorPersAll.RESDATE=date(0,0,0) and DDHfactorPersAll.WSORT=word(0)) ))  //обрабатываем все не закрытые
                     {
                        if(getfirst tmpMainAll where ((Persons.nrec           == tmpMainAll.coPers
                                                 and DDHfactorPersAll.CANVAL1 == tmpMainAll.coNabor))<>tsok)
                          {
                            ClearBuffer(#tmpMainAll);
                            tmpMainAll.coPers        :=  Persons.nrec;
                            tmpMainAll.coNabor       :=  DDHfactorPersAll.CANVAL1;
                            tmpMainAll.coStrPodr     :=  tmpMain.coStrPodr;
                            tmpMainAll.coProf        :=  tmpMain.coProf;
                            insert current tmpMainAll;
                          }
                     }
              }
          }
      }
   }
}

Procedure StatTextExcel;
{
  xlPageSetupSetOrientation(2);

  xlSetColumnWidth(4,1,1,1,1);       // ширина столбцов
  xlSetColumnWidth(30,1,2,1,2);       // ширина столбцов
  xlSetColumnWidth(25,1,3,1,3);       // ширина столбцов
  xlSetColumnWidth(8,1,4,1,4);       // ширина столбцов
  xlSetColumnWidth(30,1,5,1,5);       // ширина столбцов
  xlSetColumnWidth(16,1,6,1,6);       // ширина столбцов
  xlSetColumnWidth(13,1,7,1,7);       // ширина столбцов

  xlSetFontstyle(1,1,1,1,7);  // жирным
  xlSetFontSize(12,1,1,1,7);  // высота  шрифта
  xlSetRowHeight(15,1,1,1,7);     //высота строки
  xlMergeCells(1,1,1,7);          //объединение
  xlAlignCellsEx(xlCenter,xlCenter,1,1,1,7);
  xlSetCellStringValue('Список профессий (должностей) работающих, подлежащих периодическим медосмотрам',1,1,1,7);

  xlSetFontSize(12,2,1,2,7);  // высота  шрифта
  xlSetRowHeight(15,2,1,2,7);     //высота строки
  xlMergeCells(2,1,2,7);          //объединение
  xlAlignCellsEx(xlCenter,xlCenter,2,1,2,7);
  xlSetCellStringValue(sgettune('myorg'),2,1,2,7);
  xlFrameCells(xlBorderB,xlThin, 0, 0, 2, 1, 2, 7);

  xlSetFontSize(8,3,1,3,7);  // высота  шрифта
  xlSetRowHeight(10,3,1,3,7);     //высота строки
  xlMergeCells(3,1,3,7);          //объединение
  xlAlignCellsEx(xlCenter,xlCenter,3,1,3,7);
  xlSetCellStringValue('наименование организации, адрес ее места нахождения',3,1,3,7);

  xlSetRowHeight(120,4,1,4,7);     //высота строки
  xlSetFontSize(10,4,1,4,7);     //высота  шрифта
  xlWrapText(4,1,4,7);
  xlAlignCellsEx(xlCenter,xlCenter,4,1,4,7);
  xlFrameCells(xlBorderL or xlBorderR or xlBorderT or xlBorderB or xlInsideV or xlInsideH,
               xlThin, 0, 0, 4, 1, 4, 7);

  xlSetCellStringValue('№ п/п',4,1,4,1);
  xlSetCellStringValue('Организация, цех, участок',4,2,4,2);
  xlSetCellStringValue('Профессия (должность)',4,3,4,3);
  xlSetCellStringValue('Количество работающих',4,4,4,4);
  xlSetCellStringValue('Вредные и (или) опасные факторы производственной среды, показатели тяжести и напряженности трудового процесса <1>, работы <2>',4,5,4,5);
  xlSetCellStringValue('Класс условий труда, параметры вредных и (или) опасных условий труда (факторов производственной среды)',4,6,4,6);
  xlSetCellStringValue('Периодичность медосмотра',4,7,4,7);
}

Function StrValuePodrProf(coNrecRec:comp):string;
{
 StrValuePodrProf:='';
 if(getfirst Catalogs where (( coNrecRec == Catalogs.nrec))=tsok)
   {
     StrValuePodrProf:= Catalogs.name;
   }
}

Procedure InsertRecExcel;
var
coStrPodrOld, coProfOld, coPersOld, coNaborOld:comp;
boOneRec:boolean;
dokolPers:double;
iStr:double; //текущая строка вывода
n:double; //кол-во выведенных строк в блоке(выборка записей с одинаковыми подразделением и профессией)
npp:double; //порядковый номер блока(выборка записей с одинаковыми подразделением и профессией)
{
coStrPodrOld:=0;
coProfOld:=0;
coPersOld:=0;
coNaborOld:=0;
boOneRec:=true;
iStr:=5;
npp:=1;
  _loop tmpMain ordered by index tmpMain01
   {
      if(tmpMain.coStrPodr=coStrPodrOld and tmpMain.coProf=coProfOld and (not boOneRec)) //пропускаем уже выведенное сочетание подразделение/профессия
        {
          continue;
        }
       boOneRec    :=true;
       dokolPers   :=0;
      _loop tmpMainCalc where ((tmpMain.coStrPodr == tmpMainCalc.coStrPodr                //подсчет кол-ва работников в заданном подразделении с заданной профессией
                         and    tmpMain.coProf    == tmpMainCalc.coProf)) ordered by index  tmpMain01
       {
         if(tmpMainCalc.coPers=coPersOld and (not boOneRec))
           {
             continue;
           }
         coPersOld:=tmpMainCalc.coPers;
         dokolPers +=1;
         boOneRec    :=false;
       }

       boOneRec    :=true;
       n:=0;
      _loop tmpMainCalc where ((tmpMain.coStrPodr == tmpMainCalc.coStrPodr
                         and    tmpMain.coProf    == tmpMainCalc.coProf)) ordered by index  tmpMain02   //вывод факторов
       {
         if(tmpMainCalc.coNabor=coNaborOld and (not boOneRec))     //пропускаем уже выведенных факторы
           {
             continue;
           }

         xlSetCellStringValue(objCheckFactorRez.StrValueNabor('Factor',tmpMainCalc.coNabor),iStr,5,iStr,5);
         xlSetCellStringValue(objCheckFactorRez.StrValueNabor('Klass',tmpMainCalc.coNabor),iStr,6,iStr,6);
         xlSetCellStringValue(objCheckFactorRez.StrValueNabor('Period',tmpMainCalc.coNabor),iStr,7,iStr,7);
         xlAlignCellsEx(xlLeft,xlCenter,iStr,5,iStr,7);
         xlFrameCells(xlBorderL or xlBorderR or xlBorderT or xlBorderB or xlInsideV or xlInsideH,
               xlThin, 0, 0, iStr, 5, iStr, 7);
         xlSetFontSize(8,iStr, 5, iStr, 7);
         xlWrapText(iStr,5,iStr,7);

         iStr+=1;
         n+=1;
         coNaborOld:=tmpMainCalc.coNabor;
         boOneRec    :=false;
       }

      xlMergeCells(iStr-n,1,iStr-1,1);
      xlMergeCells(iStr-n,2,iStr-1,2);
      xlMergeCells(iStr-n,3,iStr-1,3);
      xlMergeCells(iStr-n,4,iStr-1,4);
      xlSetFontSize(8,iStr-n,1,iStr-1,4);
      xlAlignCellsEx(xlCenter,xlCenter,iStr-n,1,iStr-1,4);
      xlFrameCells(xlBorderL or xlBorderR or xlBorderT or xlBorderB or xlInsideV or xlInsideH,
               xlThin, 0, 0, iStr-n, 1, iStr-1, 4);
      xlSetCellStringValue(npp,iStr-n,1,iStr-1,1);
      xlSetCellStringValue(StrValuePodrProf(tmpMain.coStrPodr),iStr-n,2,iStr-1,2);
      xlSetCellStringValue(StrValuePodrProf(tmpMain.coProf),iStr-n,3,iStr-1,3);
      xlSetCellStringValue(dokolPers,iStr-n,4,iStr-1,4);
      xlWrapText(iStr-n,1,iStr-1,4);
      npp+=1;
      coStrPodrOld:=tmpMain.coStrPodr;
      coProfOld   :=tmpMain.coProf;
      boOneRec    :=false;
   }

       iStr+=1;
       xlMergeCells(iStr,3,iStr,4);
       xlMergeCells(iStr,5,iStr,6);
       xlSetCellStringValue(sFioRuk,iStr,5,iStr,6);
       xlAlignCellsEx(xlLeft,xlCenter,iStr,5,iStr,6);

       iStr+=1;
       xlSetFontSize(7,iStr,3,iStr,6);
       xlMergeCells(iStr,3,iStr,4);
       xlMergeCells(iStr,5,iStr,6);

       xlSetCellStringValue('(подпись)',iStr,3,iStr,4);
       xlFrameCells(xlBorderT, xlThin, 0, 0, iStr, 3, iStr, 4);
       xlAlignCellsEx(xlCenter,xlTop,iStr,3,iStr,4);

       xlSetCellStringValue('(ФИО руководителя)',iStr,5,iStr,6);
       xlFrameCells(xlBorderT, xlThin, 0, 0, iStr, 5, iStr, 6);
       xlAlignCellsEx(xlCenter,xlTop,iStr,5,iStr,6);
}

Procedure CreateMacro;    //процедура создания макросов
{
 file_macro.OpenFile(GetDefaultUserPath+'MacroRepSpisProf.bas', stCreate);
 //////макрос для того чтобы при окончании листа не обрезалась объединенная строка
 file_macro.WriteLn('Sub MakePagesBreack()');
 file_macro.WriteLn('Dim rUsRng As Range, li As Long, lCnt As Long');
 file_macro.WriteLn('Set rUsRng = Range("A1", Cells.SpecialCells(11))');
 file_macro.WriteLn('For li = 1 To rUsRng.Rows.Count+1000');
 file_macro.WriteLn('If rUsRng.Rows(li).PageBreak <> xlNone Then');
 file_macro.WriteLn('If rUsRng.Cells(li, 1).MergeCells Then');
 file_macro.WriteLn('lCnt = li - Cells(li, 1).MergeArea.Row');
 file_macro.WriteLn('If lCnt > 0 Then Rows(li - lCnt).Resize(lCnt).Insert: lCnt = 0');
 file_macro.WriteLn('End If');
 file_macro.WriteLn('End If');
 file_macro.WriteLn('Next li');
 file_macro.WriteLn('End Sub');
 file_macro.WriteLn('');
 ///////////

 file_macro.WriteLn('');
 //////макрос для установки заголовка, который будет повторяться на каждом листе
 file_macro.WriteLn('Sub PrintTop()');
 file_macro.WriteLn('Application.PrintCommunication = False');
 file_macro.WriteLn('With ActiveSheet.PageSetup');
 file_macro.WriteLn('.PrintTitleRows = "$4:$4"');     // координаты строки с заголовком
 file_macro.WriteLn('.PrintTitleColumns = ""');
 file_macro.WriteLn('End With');
 file_macro.WriteLn('End Sub');
 ///////
 file_macro.Close;
}

Procedure CreateRepExcel;
{
  xlCreateExcel(GetDefaultUserPath+'Список профессий (должностей) работающих, подлежащих периодическим медосмотрам',true);
  StartNewVisual(vtRotateVisual, vfTimer + vfBreak + vfConfirm,
                 'Формирование отчета', 1);

  StatTextExcel;
  InsertRecExcel;

  CreateMacro;

  if(xlImportModule(GetDefaultUserPath+'MacroRepSpisProf.bas'))
    {
      xlRunMacro('PrintTop');

      if(wMakroPageRun=1)
        {
          xlRunMacro('MakePagesBreack');
        }
    }

  StopVisual('', 0);
  xlSaveWorkBook(1);

  message('Отчет сформирован!');
  xlKillExcel;
}

Procedure CreateReport;
{
CheckFactorPers;

CreateRepExcel;
}

Function RepSpisProf_Pick:boolean;
{
  RepSpisProf_Pick:=false;
  case CurField of
   #sFioRuk:
           {
              cPer1:=0;
              sFioRuk:='';
              if (RunInterface('GetPers', cPer1) <> cmCancel)
                 {
                   if(getfirst PersonsCheck where ((cPer1==PersonsCheck.nrec))=tsok)
                     {
                       set sFioRuk:=PersonsCheck.FIO;
                     }
                 }
           }
  end;
  RepSpisProf_Pick:=true;
}

Function RepSpisProf_DelOnProtect:boolean;
{
  RepSpisProf_DelOnProtect:=false;
  case CurField of
   #sFioRuk:
           {
             set sFioRuk:='';
           }
  end;
  RepSpisProf_DelOnProtect:=true;
}

Procedure ReadDSK;
{
  if (NOT ReadMyDSK(sFioRuk, 'sFioRukSpisProfTelecom'    , TRUE))
  {
    sFioRuk:='';
  }
}

Procedure SaveDSK;
{
  SaveMyDSK(sFioRuk, 'sFioRukSpisProfTelecom');
}

Handleevent
cmInit:
{
  wYear:=Year(cur_date);
  ReadDSK;
}
cmOk:
{
  PutCommand(cmDefault);
}
cmDefault:
{
  SaveDSK;

  if(not CheckYear)
    {
      abort;
    }
  else
    {
      CreateReport;
      CloseInterFace(0);
    }
}
cmDelOnProtect:
{
   if (not RepSpisProf_DelOnProtect)
    {
     Abort;
    }
}
cmPick:
{
   if (not RepSpisProf_Pick)
    {
     Abort;
    }
}
end;
End.
